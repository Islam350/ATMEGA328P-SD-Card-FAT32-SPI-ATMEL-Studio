
SD_LOGGER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001f98  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a1  00800128  00800128  00002054  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002084  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f95  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  000051c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000168f  00000000  00000000  00005e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  000074a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3e  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d1  00000000  00000000  0000854e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__ctors_end>
       4:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
       8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
       c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      10:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      14:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      18:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      1c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      20:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      24:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      28:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      30:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      34:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      38:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      3c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      40:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      44:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      48:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      4c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      50:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      54:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      58:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      5c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      60:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      64:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 72       	andi	r20, 0x25	; 37
      6a:	72 6f       	ori	r23, 0xF2	; 242
      6c:	72 20       	and	r7, r2
      6e:	69 6e       	ori	r22, 0xE9	; 233
      70:	20 67       	ori	r18, 0x70	; 112
      72:	65 74       	andi	r22, 0x45	; 69
      74:	74 69       	ori	r23, 0x94	; 148
      76:	6e 67       	ori	r22, 0x7E	; 126
      78:	20 63       	ori	r18, 0x30	; 48
      7a:	6c 75       	andi	r22, 0x5C	; 92
      7c:	73 74       	andi	r23, 0x43	; 67
      7e:	65 72       	andi	r22, 0x25	; 37
	...

00000081 <__c.2317>:
      81:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      91:	68 61 69 6e 00                                      hain.

00000096 <__c.2305>:
      96:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      a6:	21 00                                               !.

000000a8 <__c.2297>:
      a8:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      b8:	21 00                                               !.

000000ba <__c.2254>:
      ba:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
      ca:	2e 2e 00                                            ...

000000cd <__c.2242>:
      cd:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      dd:	20 63 6c 75 73 74 65 72 00                           cluster.

000000e6 <__c.2221>:
      e6:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      f6:	20 63 6c 75 73 74 65 72 00                           cluster.

000000ff <__c.2213>:
      ff:	52 4f 4f 54 00                                      ROOT.

00000104 <__c.2211>:
     104:	44 49 52 00                                         DIR.

00000108 <__c.2209>:
     108:	20 20 20 00                                            .

0000010c <__c.2207>:
     10c:	46 49 4c 45 00                                      FILE.

00000111 <__c.2205>:
     111:	20 20 20 00                                            .

00000115 <__c.2199>:
     115:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

00000123 <__c.2197>:
     123:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

0000012e <__c.2192>:
     12e:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     13e:	69 73 74 21 00                                      ist!.

00000143 <__c.2373>:
     143:	0a 0d 0a 0d 20 49 6e 76 61 6c 69 64 20 6f 70 74     .... Invalid opt
     153:	69 6f 6e 21 0a 0d 00                                ion!...

0000015a <__c.2369>:
     15a:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     16a:	69 73 74 2e 2e 00                                   ist...

00000170 <__c.2366>:
     170:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     180:	6f 6e 67 2e 2e 00                                   ong...

00000186 <__c.2359>:
     186:	0a 0d 45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d     ..Enter file nam
     196:	65 3a 20 00                                         e: .

0000019a <__c.2355>:
     19a:	44 6f 6e 65 00                                      Done.

0000019f <__c.2353>:
     19f:	57 72 69 74 69 6e 67 20 2e 2e 2e 00                 Writing ....

000001ab <__c.2341>:
     1ab:	0a 4f 70 65 72 61 74 69 6f 6e 20 53 74 6f 70 70     .Operation Stopp
     1bb:	65 64 2e 2e 00                                      ed...

000001c0 <__c.2338>:
     1c0:	0a 0d 0a 0d 3e 20 45 6e 74 65 72 20 74 68 65 20     ....> Enter the 
     1d0:	6f 70 74 69 6f 6e 3a 00                             option:.

000001d8 <__c.2336>:
     1d8:	0a 0d 3e 20 35 20 3a 20 44 69 73 70 6c 61 79 20     ..> 5 : Display 
     1e8:	4d 65 6d 6f 72 79 00                                Memory.

000001ef <__c.2334>:
     1ef:	0a 0d 3e 20 34 20 3a 20 44 65 6c 65 74 65 20 46     ..> 4 : Delete F
     1ff:	69 6c 65 00                                         ile.

00000203 <__c.2332>:
     203:	0a 0d 3e 20 33 20 3a 20 52 65 61 64 20 46 69 6c     ..> 3 : Read Fil
     213:	65 00                                               e.

00000215 <__c.2330>:
     215:	0a 0d 3e 20 32 20 3a 20 57 72 69 74 65 20 54 65     ..> 2 : Write Te
     225:	73 74 20 46 69 6c 65 00                             st File.

0000022d <__c.2328>:
     22d:	0a 0d 3e 20 31 20 3a 20 47 65 74 20 66 69 6c 65     ..> 1 : Get file
     23d:	20 6c 69 73 74 00                                    list.

00000243 <__c.2326>:
     243:	0a 0d 0a 0d 3e 20 30 20 3a 20 45 78 69 74 20 74     ....> 0 : Exit t
     253:	68 65 20 4d 65 6e 75 00                             he Menu.

0000025b <__c.2324>:
     25b:	0a 0d 46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e     ..FAT32 not foun
     26b:	64 21 00                                            d!.

0000026e <__c.2322>:
     26e:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     27e:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000288 <__c.2319>:
     288:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     298:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     2a8:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000002b3 <__c.2316>:
     2b3:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     2c3:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000002d0 <__c.2312>:
     2d0:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     2e0:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     2f0:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000002fb <__c.2309>:
     2fb:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     30b:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000318 <__c.2307>:
     318:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     328:	63 74 65 64 2e 2e 00                                cted...

0000032f <__c.2302>:
     32f:	0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     33f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     34f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     35f:	2a 2a 2a 2a 2a 2a 0a 0d 00                          ******...

00000368 <__c.2300>:
     368:	0a 0d 20 20 20 20 20 20 20 20 20 6d 69 63 72 6f     ..         micro
     378:	53 44 20 41 54 4d 45 47 41 33 32 38 50 20 00        SD ATMEGA328P .

00000387 <__c.2298>:
     387:	0a 0d 0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ....************
     397:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3b7:	2a 2a 2a 2a 2a 2a 2a 2a 00                          ********.

000003c0 <__ctors_end>:
     3c0:	11 24       	eor	r1, r1
     3c2:	1f be       	out	0x3f, r1	; 63
     3c4:	cf ef       	ldi	r28, 0xFF	; 255
     3c6:	d8 e0       	ldi	r29, 0x08	; 8
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	cd bf       	out	0x3d, r28	; 61

000003cc <__do_copy_data>:
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	e8 e9       	ldi	r30, 0x98	; 152
     3d4:	ff e1       	ldi	r31, 0x1F	; 31
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__do_copy_data+0x10>
     3d8:	05 90       	lpm	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	a8 32       	cpi	r26, 0x28	; 40
     3de:	b1 07       	cpc	r27, r17
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__do_copy_data+0xc>

000003e2 <__do_clear_bss>:
     3e2:	23 e0       	ldi	r18, 0x03	; 3
     3e4:	a8 e2       	ldi	r26, 0x28	; 40
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <.do_clear_bss_start>

000003ea <.do_clear_bss_loop>:
     3ea:	1d 92       	st	X+, r1

000003ec <.do_clear_bss_start>:
     3ec:	a9 3c       	cpi	r26, 0xC9	; 201
     3ee:	b2 07       	cpc	r27, r18
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <.do_clear_bss_loop>
     3f2:	0e 94 24 0c 	call	0x1848	; 0x1848 <main>
     3f6:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <_exit>

000003fa <__bad_interrupt>:
     3fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003fe <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     406:	a0 91 4d 03 	lds	r26, 0x034D	; 0x80034d <sectorPerCluster>
     40a:	b0 91 4e 03 	lds	r27, 0x034E	; 0x80034e <sectorPerCluster+0x1>
     40e:	c0 90 35 01 	lds	r12, 0x0135	; 0x800135 <firstDataSector>
     412:	d0 90 36 01 	lds	r13, 0x0136	; 0x800136 <firstDataSector+0x1>
     416:	e0 90 37 01 	lds	r14, 0x0137	; 0x800137 <firstDataSector+0x2>
     41a:	f0 90 38 01 	lds	r15, 0x0138	; 0x800138 <firstDataSector+0x3>
     41e:	9b 01       	movw	r18, r22
     420:	ac 01       	movw	r20, r24
     422:	22 50       	subi	r18, 0x02	; 2
     424:	31 09       	sbc	r19, r1
     426:	41 09       	sbc	r20, r1
     428:	51 09       	sbc	r21, r1
     42a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__muluhisi3>
     42e:	6c 0d       	add	r22, r12
     430:	7d 1d       	adc	r23, r13
     432:	8e 1d       	adc	r24, r14
     434:	9f 1d       	adc	r25, r15
}
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	08 95       	ret

00000440 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     440:	4f 92       	push	r4
     442:	5f 92       	push	r5
     444:	6f 92       	push	r6
     446:	7f 92       	push	r7
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	d4 2f       	mov	r29, r20
     462:	28 01       	movw	r4, r16
     464:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     466:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <reservedSectorCount>
     46a:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <reservedSectorCount+0x1>
     46e:	4b 01       	movw	r8, r22
     470:	5c 01       	movw	r10, r24
     472:	88 0c       	add	r8, r8
     474:	99 1c       	adc	r9, r9
     476:	aa 1c       	adc	r10, r10
     478:	bb 1c       	adc	r11, r11
     47a:	88 0c       	add	r8, r8
     47c:	99 1c       	adc	r9, r9
     47e:	aa 1c       	adc	r10, r10
     480:	bb 1c       	adc	r11, r11
     482:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <bytesPerSector>
     486:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <bytesPerSector+0x1>
     48a:	c0 90 4f 03 	lds	r12, 0x034F	; 0x80034f <unusedSectors>
     48e:	d0 90 50 03 	lds	r13, 0x0350	; 0x800350 <unusedSectors+0x1>
     492:	e0 90 51 03 	lds	r14, 0x0351	; 0x800351 <unusedSectors+0x2>
     496:	f0 90 52 03 	lds	r15, 0x0352	; 0x800352 <unusedSectors+0x3>
     49a:	c4 0e       	add	r12, r20
     49c:	d5 1e       	adc	r13, r21
     49e:	e1 1c       	adc	r14, r1
     4a0:	f1 1c       	adc	r15, r1
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	c5 01       	movw	r24, r10
     4a8:	b4 01       	movw	r22, r8
     4aa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     4ae:	c2 0e       	add	r12, r18
     4b0:	d3 1e       	adc	r13, r19
     4b2:	e4 1e       	adc	r14, r20
     4b4:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     4b6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <bytesPerSector>
     4ba:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <bytesPerSector+0x1>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     4ca:	4b 01       	movw	r8, r22
     4cc:	5c 01       	movw	r10, r24
     4ce:	ca e0       	ldi	r28, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
     4d8:	88 23       	and	r24, r24
     4da:	11 f0       	breq	.+4      	; 0x4e0 <getSetNextCluster+0xa0>
     4dc:	c1 50       	subi	r28, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     4de:	c1 f7       	brne	.-16     	; 0x4d0 <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     4e0:	f4 01       	movw	r30, r8
     4e2:	e3 5b       	subi	r30, 0xB3	; 179
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254

if(get_set == GET)
     4e6:	d1 11       	cpse	r29, r1
     4e8:	08 c0       	rjmp	.+16     	; 0x4fa <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	a2 81       	ldd	r26, Z+2	; 0x02
     4f0:	b3 81       	ldd	r27, Z+3	; 0x03
     4f2:	bc 01       	movw	r22, r24
     4f4:	cd 01       	movw	r24, r26
     4f6:	9f 70       	andi	r25, 0x0F	; 15
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <getSetNextCluster+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     4fa:	40 82       	st	Z, r4
     4fc:	51 82       	std	Z+1, r5	; 0x01
     4fe:	62 82       	std	Z+2, r6	; 0x02
     500:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>

return (0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	cb 01       	movw	r24, r22
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	9f 90       	pop	r9
     526:	8f 90       	pop	r8
     528:	7f 90       	pop	r7
     52a:	6f 90       	pop	r6
     52c:	5f 90       	pop	r5
     52e:	4f 90       	pop	r4
     530:	08 95       	ret

00000532 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	d8 2f       	mov	r29, r24
     540:	c6 2f       	mov	r28, r22
     542:	69 01       	movw	r12, r18
     544:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     546:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <unusedSectors>
     54a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <unusedSectors+0x1>
     54e:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <unusedSectors+0x2>
     552:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <unusedSectors+0x3>
     556:	bc 01       	movw	r22, r24
     558:	cd 01       	movw	r24, r26
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	8f 4f       	sbci	r24, 0xFF	; 255
     560:	9f 4f       	sbci	r25, 0xFF	; 255
     562:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     566:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <buffer>
     56a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <buffer+0x1>
     56e:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <buffer+0x2>
     572:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <buffer+0x3>
     576:	82 35       	cpi	r24, 0x52	; 82
     578:	92 45       	sbci	r25, 0x52	; 82
     57a:	a1 46       	sbci	r26, 0x61	; 97
     57c:	b1 44       	sbci	r27, 0x41	; 65
     57e:	09 f0       	breq	.+2      	; 0x582 <getSetFreeCluster+0x50>
     580:	58 c0       	rjmp	.+176    	; 0x632 <getSetFreeCluster+0x100>
     582:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <buffer+0x1e4>
     586:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <buffer+0x1e5>
     58a:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <buffer+0x1e6>
     58e:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <buffer+0x1e7>
     592:	82 37       	cpi	r24, 0x72	; 114
     594:	92 47       	sbci	r25, 0x72	; 114
     596:	a1 44       	sbci	r26, 0x41	; 65
     598:	b1 46       	sbci	r27, 0x61	; 97
     59a:	09 f0       	breq	.+2      	; 0x59e <getSetFreeCluster+0x6c>
     59c:	4e c0       	rjmp	.+156    	; 0x63a <getSetFreeCluster+0x108>
     59e:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <buffer+0x1fc>
     5a2:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <buffer+0x1fd>
     5a6:	a0 91 4b 03 	lds	r26, 0x034B	; 0x80034b <buffer+0x1fe>
     5aa:	b0 91 4c 03 	lds	r27, 0x034C	; 0x80034c <buffer+0x1ff>
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	a5 45       	sbci	r26, 0x55	; 85
     5b2:	ba 4a       	sbci	r27, 0xAA	; 170
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <getSetFreeCluster+0x86>
     5b6:	45 c0       	rjmp	.+138    	; 0x642 <getSetFreeCluster+0x110>
  return 0xffffffff;

 if(get_set == GET)
     5b8:	c1 11       	cpse	r28, r1
     5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <getSetFreeCluster+0xb2>
 {
   if(totOrNext == TOTAL_FREE)
     5bc:	d1 30       	cpi	r29, 0x01	; 1
     5be:	49 f4       	brne	.+18     	; 0x5d2 <getSetFreeCluster+0xa0>
      return(FS->freeClusterCount);
     5c0:	60 91 35 03 	lds	r22, 0x0335	; 0x800335 <buffer+0x1e8>
     5c4:	70 91 36 03 	lds	r23, 0x0336	; 0x800336 <buffer+0x1e9>
     5c8:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <buffer+0x1ea>
     5cc:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <buffer+0x1eb>
     5d0:	3b c0       	rjmp	.+118    	; 0x648 <getSetFreeCluster+0x116>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     5d2:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <buffer+0x1ec>
     5d6:	70 91 3a 03 	lds	r23, 0x033A	; 0x80033a <buffer+0x1ed>
     5da:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <buffer+0x1ee>
     5de:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <buffer+0x1ef>
     5e2:	32 c0       	rjmp	.+100    	; 0x648 <getSetFreeCluster+0x116>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     5e4:	d1 30       	cpi	r29, 0x01	; 1
     5e6:	49 f4       	brne	.+18     	; 0x5fa <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
     5e8:	c0 92 35 03 	sts	0x0335, r12	; 0x800335 <buffer+0x1e8>
     5ec:	d0 92 36 03 	sts	0x0336, r13	; 0x800336 <buffer+0x1e9>
     5f0:	e0 92 37 03 	sts	0x0337, r14	; 0x800337 <buffer+0x1ea>
     5f4:	f0 92 38 03 	sts	0x0338, r15	; 0x800338 <buffer+0x1eb>
     5f8:	08 c0       	rjmp	.+16     	; 0x60a <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     5fa:	c0 92 39 03 	sts	0x0339, r12	; 0x800339 <buffer+0x1ec>
     5fe:	d0 92 3a 03 	sts	0x033A, r13	; 0x80033a <buffer+0x1ed>
     602:	e0 92 3b 03 	sts	0x033B, r14	; 0x80033b <buffer+0x1ee>
     606:	f0 92 3c 03 	sts	0x033C, r15	; 0x80033c <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     60a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <unusedSectors>
     60e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <unusedSectors+0x1>
     612:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <unusedSectors+0x2>
     616:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <unusedSectors+0x3>
     61a:	bc 01       	movw	r22, r24
     61c:	cd 01       	movw	r24, r26
     61e:	6f 5f       	subi	r22, 0xFF	; 255
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	8f 4f       	sbci	r24, 0xFF	; 255
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>
 }
 return 0xffffffff;
     62a:	6f ef       	ldi	r22, 0xFF	; 255
     62c:	7f ef       	ldi	r23, 0xFF	; 255
     62e:	cb 01       	movw	r24, r22
     630:	0b c0       	rjmp	.+22     	; 0x648 <getSetFreeCluster+0x116>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     632:	6f ef       	ldi	r22, 0xFF	; 255
     634:	7f ef       	ldi	r23, 0xFF	; 255
     636:	cb 01       	movw	r24, r22
     638:	07 c0       	rjmp	.+14     	; 0x648 <getSetFreeCluster+0x116>
     63a:	6f ef       	ldi	r22, 0xFF	; 255
     63c:	7f ef       	ldi	r23, 0xFF	; 255
     63e:	cb 01       	movw	r24, r22
     640:	03 c0       	rjmp	.+6      	; 0x648 <getSetFreeCluster+0x116>
     642:	6f ef       	ldi	r22, 0xFF	; 255
     644:	7f ef       	ldi	r23, 0xFF	; 255
     646:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	08 95       	ret

00000656 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     662:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <unusedSectors>
     666:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <unusedSectors+0x1>
     66a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <unusedSectors+0x2>
     66e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <unusedSectors+0x3>

SD_readSingleBlock(0);
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	cb 01       	movw	r24, r22
     678:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     67c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <buffer>
     680:	8d 7f       	andi	r24, 0xFD	; 253
     682:	89 3e       	cpi	r24, 0xE9	; 233
     684:	01 f1       	breq	.+64     	; 0x6c6 <getBootSectorData+0x70>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     686:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <buffer+0x1fe>
     68a:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <buffer+0x1ff>
     68e:	85 35       	cpi	r24, 0x55	; 85
     690:	9a 4a       	sbci	r25, 0xAA	; 170
     692:	09 f0       	breq	.+2      	; 0x696 <getBootSectorData+0x40>
     694:	97 c0       	rjmp	.+302    	; 0x7c4 <getBootSectorData+0x16e>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     696:	60 91 13 03 	lds	r22, 0x0313	; 0x800313 <buffer+0x1c6>
     69a:	70 91 14 03 	lds	r23, 0x0314	; 0x800314 <buffer+0x1c7>
     69e:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <buffer+0x1c8>
     6a2:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <buffer+0x1c9>
     6a6:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <unusedSectors>
     6aa:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <unusedSectors+0x1>
     6ae:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <unusedSectors+0x2>
     6b2:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <unusedSectors+0x3>
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     6b6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     6ba:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <buffer>
     6be:	8d 7f       	andi	r24, 0xFD	; 253
     6c0:	89 3e       	cpi	r24, 0xE9	; 233
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <getBootSectorData+0x70>
     6c4:	81 c0       	rjmp	.+258    	; 0x7c8 <getBootSectorData+0x172>
}

bytesPerSector = bpb->bytesPerSector;
     6c6:	ed e4       	ldi	r30, 0x4D	; 77
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	83 85       	ldd	r24, Z+11	; 0x0b
     6cc:	94 85       	ldd	r25, Z+12	; 0x0c
     6ce:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <bytesPerSector+0x1>
     6d2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <bytesPerSector>
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     6d6:	85 85       	ldd	r24, Z+13	; 0x0d
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <sectorPerCluster+0x1>
     6de:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <sectorPerCluster>
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     6e2:	c6 85       	ldd	r28, Z+14	; 0x0e
     6e4:	d7 85       	ldd	r29, Z+15	; 0x0f
     6e6:	d0 93 59 03 	sts	0x0359, r29	; 0x800359 <reservedSectorCount+0x1>
     6ea:	c0 93 58 03 	sts	0x0358, r28	; 0x800358 <reservedSectorCount>
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     6ee:	84 a5       	ldd	r24, Z+44	; 0x2c
     6f0:	95 a5       	ldd	r25, Z+45	; 0x2d
     6f2:	a6 a5       	ldd	r26, Z+46	; 0x2e
     6f4:	b7 a5       	ldd	r27, Z+47	; 0x2f
     6f6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rootCluster>
     6fa:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rootCluster+0x1>
     6fe:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <rootCluster+0x2>
     702:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <rootCluster+0x3>
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     706:	00 91 58 03 	lds	r16, 0x0358	; 0x800358 <reservedSectorCount>
     70a:	10 91 59 03 	lds	r17, 0x0359	; 0x800359 <reservedSectorCount+0x1>
     70e:	a0 89       	ldd	r26, Z+16	; 0x10
     710:	24 a1       	ldd	r18, Z+36	; 0x24
     712:	35 a1       	ldd	r19, Z+37	; 0x25
     714:	46 a1       	ldd	r20, Z+38	; 0x26
     716:	57 a1       	ldd	r21, Z+39	; 0x27
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__muluhisi3>
     71e:	ab 01       	movw	r20, r22
     720:	bc 01       	movw	r22, r24
     722:	84 8d       	ldd	r24, Z+28	; 0x1c
     724:	95 8d       	ldd	r25, Z+29	; 0x1d
     726:	a6 8d       	ldd	r26, Z+30	; 0x1e
     728:	b7 8d       	ldd	r27, Z+31	; 0x1f
     72a:	80 0f       	add	r24, r16
     72c:	91 1f       	adc	r25, r17
     72e:	a1 1d       	adc	r26, r1
     730:	b1 1d       	adc	r27, r1
     732:	84 0f       	add	r24, r20
     734:	95 1f       	adc	r25, r21
     736:	a6 1f       	adc	r26, r22
     738:	b7 1f       	adc	r27, r23
     73a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <firstDataSector>
     73e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <firstDataSector+0x1>
     742:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <firstDataSector+0x2>
     746:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <firstDataSector+0x3>

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     74a:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <sectorPerCluster>
     74e:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <sectorPerCluster+0x1>
     752:	80 a1       	ldd	r24, Z+32	; 0x20
     754:	91 a1       	ldd	r25, Z+33	; 0x21
     756:	a2 a1       	ldd	r26, Z+34	; 0x22
     758:	b3 a1       	ldd	r27, Z+35	; 0x23
     75a:	8c 1b       	sub	r24, r28
     75c:	9d 0b       	sbc	r25, r29
     75e:	a1 09       	sbc	r26, r1
     760:	b1 09       	sbc	r27, r1
     762:	7c 01       	movw	r14, r24
     764:	8d 01       	movw	r16, r26
     766:	e4 1a       	sub	r14, r20
     768:	f5 0a       	sbc	r15, r21
     76a:	06 0b       	sbc	r16, r22
     76c:	17 0b       	sbc	r17, r23
     76e:	c8 01       	movw	r24, r16
     770:	b7 01       	movw	r22, r14
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     77a:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <totalClusters>
     77e:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <totalClusters+0x1>
     782:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <totalClusters+0x2>
     786:	50 93 42 01 	sts	0x0142, r21	; 0x800142 <totalClusters+0x3>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
     798:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <totalClusters>
     79c:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <totalClusters+0x1>
     7a0:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <totalClusters+0x2>
     7a4:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <totalClusters+0x3>
     7a8:	06 17       	cp	r16, r22
     7aa:	17 07       	cpc	r17, r23
     7ac:	28 07       	cpc	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	20 f4       	brcc	.+8      	; 0x7ba <getBootSectorData+0x164>
     freeClusterCountUpdated = 0;
     7b2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <freeClusterCountUpdated>
else
	 freeClusterCountUpdated = 1;
return 0;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	08 c0       	rjmp	.+16     	; 0x7ca <getBootSectorData+0x174>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <freeClusterCountUpdated>
return 0;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	03 c0       	rjmp	.+6      	; 0x7ca <getBootSectorData+0x174>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <getBootSectorData+0x174>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     7c8:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	08 95       	ret

000007d8 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2b 97       	sbiw	r28, 0x0b	; 11
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	bc 01       	movw	r22, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     7ee:	dc 01       	movw	r26, r24
     7f0:	8c 91       	ld	r24, X
     7f2:	8e 32       	cpi	r24, 0x2E	; 46
     7f4:	61 f1       	breq	.+88     	; 0x84e <convertFileName+0x76>
     7f6:	fb 01       	movw	r30, r22
     7f8:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     7fa:	91 e0       	ldi	r25, 0x01	; 1
if(fileName[j] == '.') break;
     7fc:	81 91       	ld	r24, Z+
     7fe:	8e 32       	cpi	r24, 0x2E	; 46
     800:	21 f0       	breq	.+8      	; 0x80a <convertFileName+0x32>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     802:	9f 5f       	subi	r25, 0xFF	; 255
     804:	9c 30       	cpi	r25, 0x0C	; 12
     806:	d1 f7       	brne	.-12     	; 0x7fc <convertFileName+0x24>
     808:	06 c0       	rjmp	.+12     	; 0x816 <convertFileName+0x3e>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     80a:	99 30       	cpi	r25, 0x09	; 9
     80c:	20 f4       	brcc	.+8      	; 0x816 <convertFileName+0x3e>

for(k=0; k<j; k++) //setting file name
     80e:	91 11       	cpse	r25, r1
     810:	08 c0       	rjmp	.+16     	; 0x822 <convertFileName+0x4a>
     812:	29 2f       	mov	r18, r25
     814:	1e c0       	rjmp	.+60     	; 0x852 <convertFileName+0x7a>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     816:	8a eb       	ldi	r24, 0xBA	; 186
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	62 c0       	rjmp	.+196    	; 0x8e6 <convertFileName+0x10e>
     822:	fb 01       	movw	r30, r22
     824:	9e 01       	movw	r18, r28
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	4f ef       	ldi	r20, 0xFF	; 255
     82c:	49 0f       	add	r20, r25
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	5f 4f       	sbci	r21, 0xFF	; 255
     834:	46 0f       	add	r20, r22
     836:	57 1f       	adc	r21, r23

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     838:	81 91       	ld	r24, Z+
     83a:	d9 01       	movw	r26, r18
     83c:	8d 93       	st	X+, r24
     83e:	9d 01       	movw	r18, r26
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     840:	4e 17       	cp	r20, r30
     842:	5f 07       	cpc	r21, r31
     844:	c9 f7       	brne	.-14     	; 0x838 <convertFileName+0x60>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     846:	98 30       	cpi	r25, 0x08	; 8
     848:	78 f4       	brcc	.+30     	; 0x868 <convertFileName+0x90>
     84a:	29 2f       	mov	r18, r25
     84c:	02 c0       	rjmp	.+4      	; 0x852 <convertFileName+0x7a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     84e:	90 e0       	ldi	r25, 0x00	; 0
if(fileName[j] == '.') break;
     850:	20 e0       	ldi	r18, 0x00	; 0

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     852:	80 e2       	ldi	r24, 0x20	; 32
     854:	e1 e0       	ldi	r30, 0x01	; 1
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	ec 0f       	add	r30, r28
     85a:	fd 1f       	adc	r31, r29
     85c:	e2 0f       	add	r30, r18
     85e:	f1 1d       	adc	r31, r1
     860:	80 83       	st	Z, r24
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     862:	2f 5f       	subi	r18, 0xFF	; 255
     864:	28 30       	cpi	r18, 0x08	; 8
     866:	b0 f3       	brcs	.-20     	; 0x854 <convertFileName+0x7c>
  fileNameFAT[k] = ' ';

j++;
     868:	21 e0       	ldi	r18, 0x01	; 1
     86a:	29 0f       	add	r18, r25
for(k=8; k<11; k++) //setting file extention
     86c:	98 e0       	ldi	r25, 0x08	; 8
{
  if(fileName[j] != 0)
     86e:	fb 01       	movw	r30, r22
     870:	e2 0f       	add	r30, r18
     872:	f1 1d       	adc	r31, r1
     874:	80 81       	ld	r24, Z
     876:	81 11       	cpse	r24, r1
     878:	03 c0       	rjmp	.+6      	; 0x880 <convertFileName+0xa8>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     87a:	9b 30       	cpi	r25, 0x0B	; 11
     87c:	50 f0       	brcs	.+20     	; 0x892 <convertFileName+0xba>
     87e:	15 c0       	rjmp	.+42     	; 0x8aa <convertFileName+0xd2>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     880:	2f 5f       	subi	r18, 0xFF	; 255
     882:	e1 e0       	ldi	r30, 0x01	; 1
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ec 0f       	add	r30, r28
     888:	fd 1f       	adc	r31, r29
     88a:	e9 0f       	add	r30, r25
     88c:	f1 1d       	adc	r31, r1
     88e:	80 83       	st	Z, r24
     890:	0c c0       	rjmp	.+24     	; 0x8aa <convertFileName+0xd2>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     892:	20 e2       	ldi	r18, 0x20	; 32
     894:	e1 e0       	ldi	r30, 0x01	; 1
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	ec 0f       	add	r30, r28
     89a:	fd 1f       	adc	r31, r29
     89c:	e9 0f       	add	r30, r25
     89e:	f1 1d       	adc	r31, r1
     8a0:	20 83       	st	Z, r18
     8a2:	9f 5f       	subi	r25, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     8a4:	9b 30       	cpi	r25, 0x0B	; 11
     8a6:	b1 f7       	brne	.-20     	; 0x894 <convertFileName+0xbc>
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <convertFileName+0xd8>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     8aa:	9f 5f       	subi	r25, 0xFF	; 255
     8ac:	9b 30       	cpi	r25, 0x0B	; 11
     8ae:	f8 f2       	brcs	.-66     	; 0x86e <convertFileName+0x96>
     8b0:	9e 01       	movw	r18, r28
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	ae 01       	movw	r20, r28
     8b8:	44 5f       	subi	r20, 0xF4	; 244
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     8be:	80 81       	ld	r24, Z
     8c0:	9f e9       	ldi	r25, 0x9F	; 159
     8c2:	98 0f       	add	r25, r24
     8c4:	9a 31       	cpi	r25, 0x1A	; 26
     8c6:	10 f4       	brcc	.+4      	; 0x8cc <convertFileName+0xf4>
    fileNameFAT[j] -= 0x20;
     8c8:	80 52       	subi	r24, 0x20	; 32
     8ca:	80 83       	st	Z, r24
     8cc:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     8ce:	4e 17       	cp	r20, r30
     8d0:	5f 07       	cpc	r21, r31
     8d2:	a9 f7       	brne	.-22     	; 0x8be <convertFileName+0xe6>
     8d4:	fb 01       	movw	r30, r22
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     8d6:	d9 01       	movw	r26, r18
     8d8:	8d 91       	ld	r24, X+
     8da:	9d 01       	movw	r18, r26
     8dc:	81 93       	st	Z+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     8de:	a4 17       	cp	r26, r20
     8e0:	b5 07       	cpc	r27, r21
     8e2:	c9 f7       	brne	.-14     	; 0x8d6 <convertFileName+0xfe>
  fileName[j] = fileNameFAT[j];

return 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
}
     8e6:	2b 96       	adiw	r28, 0x0b	; 11
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     914:	6b 01       	movw	r12, r22
     916:	7c 01       	movw	r14, r24
     918:	20 e8       	ldi	r18, 0x80	; 128
     91a:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     91c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <totalClusters>
     920:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <totalClusters+0x1>
     924:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <totalClusters+0x2>
     928:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <totalClusters+0x3>
     92c:	c8 16       	cp	r12, r24
     92e:	d9 06       	cpc	r13, r25
     930:	ea 06       	cpc	r14, r26
     932:	fb 06       	cpc	r15, r27
     934:	08 f0       	brcs	.+2      	; 0x938 <__stack+0x39>
     936:	70 c0       	rjmp	.+224    	; 0xa18 <__stack+0x119>
     938:	46 01       	movw	r8, r12
     93a:	57 01       	movw	r10, r14
     93c:	88 0c       	add	r8, r8
     93e:	99 1c       	adc	r9, r9
     940:	aa 1c       	adc	r10, r10
     942:	bb 1c       	adc	r11, r11
     944:	88 0c       	add	r8, r8
     946:	99 1c       	adc	r9, r9
     948:	aa 1c       	adc	r10, r10
     94a:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     94c:	cd e4       	ldi	r28, 0x4D	; 77
     94e:	d1 e0       	ldi	r29, 0x01	; 1
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     950:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <reservedSectorCount>
     954:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <reservedSectorCount+0x1>
     958:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <bytesPerSector>
     95c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <bytesPerSector+0x1>
      SD_readSingleBlock(sector);
     960:	40 90 4f 03 	lds	r4, 0x034F	; 0x80034f <unusedSectors>
     964:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <unusedSectors+0x1>
     968:	60 90 51 03 	lds	r6, 0x0351	; 0x800351 <unusedSectors+0x2>
     96c:	70 90 52 03 	lds	r7, 0x0352	; 0x800352 <unusedSectors+0x3>
     970:	44 0e       	add	r4, r20
     972:	55 1e       	adc	r5, r21
     974:	61 1c       	adc	r6, r1
     976:	71 1c       	adc	r7, r1
     978:	9c 01       	movw	r18, r24
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	c5 01       	movw	r24, r10
     980:	b4 01       	movw	r22, r8
     982:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     986:	c3 01       	movw	r24, r6
     988:	b2 01       	movw	r22, r4
     98a:	62 0f       	add	r22, r18
     98c:	73 1f       	adc	r23, r19
     98e:	84 1f       	adc	r24, r20
     990:	95 1f       	adc	r25, r21
     992:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     996:	88 81       	ld	r24, Y
     998:	99 81       	ldd	r25, Y+1	; 0x01
     99a:	aa 81       	ldd	r26, Y+2	; 0x02
     99c:	bb 81       	ldd	r27, Y+3	; 0x03
     99e:	bf 70       	andi	r27, 0x0F	; 15
     9a0:	89 2b       	or	r24, r25
     9a2:	8a 2b       	or	r24, r26
     9a4:	8b 2b       	or	r24, r27
     9a6:	99 f0       	breq	.+38     	; 0x9ce <__stack+0xcf>
     9a8:	21 e0       	ldi	r18, 0x01	; 1
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
     9aa:	e2 2f       	mov	r30, r18
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
     9b6:	e3 5b       	subi	r30, 0xB3	; 179
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	80 81       	ld	r24, Z
     9bc:	91 81       	ldd	r25, Z+1	; 0x01
     9be:	a2 81       	ldd	r26, Z+2	; 0x02
     9c0:	b3 81       	ldd	r27, Z+3	; 0x03
     9c2:	bf 70       	andi	r27, 0x0F	; 15
     9c4:	89 2b       	or	r24, r25
     9c6:	8a 2b       	or	r24, r26
     9c8:	8b 2b       	or	r24, r27
     9ca:	49 f4       	brne	.+18     	; 0x9de <__stack+0xdf>
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <__stack+0xd1>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     9ce:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	62 0f       	add	r22, r18
     9d6:	71 1d       	adc	r23, r1
     9d8:	81 1d       	adc	r24, r1
     9da:	91 1d       	adc	r25, r1
     9dc:	20 c0       	rjmp	.+64     	; 0xa1e <__stack+0x11f>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	22 f7       	brpl	.-56     	; 0x9aa <__stack+0xab>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     9e2:	80 e8       	ldi	r24, 0x80	; 128
     9e4:	c8 0e       	add	r12, r24
     9e6:	d1 1c       	adc	r13, r1
     9e8:	e1 1c       	adc	r14, r1
     9ea:	f1 1c       	adc	r15, r1
     9ec:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <totalClusters>
     9f0:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <totalClusters+0x1>
     9f4:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <totalClusters+0x2>
     9f8:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <totalClusters+0x3>
     9fc:	22 e0       	ldi	r18, 0x02	; 2
     9fe:	92 0e       	add	r9, r18
     a00:	a1 1c       	adc	r10, r1
     a02:	b1 1c       	adc	r11, r1
     a04:	c8 16       	cp	r12, r24
     a06:	d9 06       	cpc	r13, r25
     a08:	ea 06       	cpc	r14, r26
     a0a:	fb 06       	cpc	r15, r27
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <__stack+0x111>
     a0e:	a0 cf       	rjmp	.-192    	; 0x950 <__stack+0x51>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	cb 01       	movw	r24, r22
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <__stack+0x11f>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	cb 01       	movw	r24, r22
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	bf 90       	pop	r11
     a2c:	af 90       	pop	r10
     a2e:	9f 90       	pop	r9
     a30:	8f 90       	pop	r8
     a32:	7f 90       	pop	r7
     a34:	6f 90       	pop	r6
     a36:	5f 90       	pop	r5
     a38:	4f 90       	pop	r4
     a3a:	08 95       	ret

00000a3c <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	64 97       	sbiw	r28, 0x14	; 20
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	d8 2e       	mov	r13, r24
     a64:	cb 01       	movw	r24, r22
     a66:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     a68:	24 e1       	ldi	r18, 0x14	; 20
     a6a:	e0 e0       	ldi	r30, 0x00	; 0
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	de 01       	movw	r26, r28
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	2a 95       	dec	r18
     a78:	e1 f7       	brne	.-8      	; 0xa72 <displayMemory+0x36>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     a7a:	1c e0       	ldi	r17, 0x0C	; 12
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     a7c:	0c e2       	ldi	r16, 0x2C	; 44
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     a7e:	0f 2e       	mov	r0, r31
     a80:	fa e0       	ldi	r31, 0x0A	; 10
     a82:	8f 2e       	mov	r8, r31
     a84:	91 2c       	mov	r9, r1
     a86:	a1 2c       	mov	r10, r1
     a88:	b1 2c       	mov	r11, r1
     a8a:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     a8c:	15 30       	cpi	r17, 0x05	; 5
     a8e:	11 f0       	breq	.+4      	; 0xa94 <displayMemory+0x58>
     a90:	19 30       	cpi	r17, 0x09	; 9
     a92:	29 f4       	brne	.+10     	; 0xa9e <displayMemory+0x62>
	{
	   memoryString[i-1] = ',';  
     a94:	fe 01       	movw	r30, r28
     a96:	e1 0f       	add	r30, r17
     a98:	f1 1d       	adc	r31, r1
     a9a:	00 83       	st	Z, r16
	   i--;
     a9c:	11 50       	subi	r17, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     a9e:	7e 01       	movw	r14, r28
     aa0:	e1 0e       	add	r14, r17
     aa2:	f1 1c       	adc	r15, r1
     aa4:	a5 01       	movw	r20, r10
     aa6:	94 01       	movw	r18, r8
     aa8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
     aac:	60 63       	ori	r22, 0x30	; 48
     aae:	f7 01       	movw	r30, r14
     ab0:	60 83       	st	Z, r22
    memory /= 10;
     ab2:	62 2f       	mov	r22, r18
     ab4:	73 2f       	mov	r23, r19
     ab6:	84 2f       	mov	r24, r20
     ab8:	95 2f       	mov	r25, r21
	if(memory == 0) break;
     aba:	61 15       	cp	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	81 05       	cpc	r24, r1
     ac0:	91 05       	cpc	r25, r1
     ac2:	11 f0       	breq	.+4      	; 0xac8 <displayMemory+0x8c>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     ac4:	11 50       	subi	r17, 0x01	; 1
     ac6:	11 f7       	brne	.-60     	; 0xa8c <displayMemory+0x50>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	df 12       	cpse	r13, r31
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <displayMemory+0x96>
     ace:	8b e4       	ldi	r24, 0x4B	; 75
     ad0:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     ad2:	ce 01       	movw	r24, r28
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <transmitString>
}
     ada:	64 96       	adiw	r28, 0x14	; 20
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	08 95       	ret

00000afe <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	cf 93       	push	r28
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     b08:	6a 01       	movw	r12, r20
     b0a:	7b 01       	movw	r14, r22
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	d9 22       	and	r13, r25
     b10:	ee 24       	eor	r14, r14
     b12:	ff 24       	eor	r15, r15
     b14:	cd 28       	or	r12, r13
     b16:	ce 28       	or	r12, r14
     b18:	cf 28       	or	r12, r15
     b1a:	51 f4       	brne	.+20     	; 0xb30 <freeMemoryUpdate+0x32>
     b1c:	03 2e       	mov	r0, r19
     b1e:	39 e0       	ldi	r19, 0x09	; 9
     b20:	76 95       	lsr	r23
     b22:	67 95       	ror	r22
     b24:	57 95       	ror	r21
     b26:	47 95       	ror	r20
     b28:	3a 95       	dec	r19
     b2a:	d1 f7       	brne	.-12     	; 0xb20 <freeMemoryUpdate+0x22>
     b2c:	30 2d       	mov	r19, r0
     b2e:	0d c0       	rjmp	.+26     	; 0xb4a <freeMemoryUpdate+0x4c>
  else size = (size / 512) +1;
     b30:	03 2e       	mov	r0, r19
     b32:	39 e0       	ldi	r19, 0x09	; 9
     b34:	76 95       	lsr	r23
     b36:	67 95       	ror	r22
     b38:	57 95       	ror	r21
     b3a:	47 95       	ror	r20
     b3c:	3a 95       	dec	r19
     b3e:	d1 f7       	brne	.-12     	; 0xb34 <freeMemoryUpdate+0x36>
     b40:	30 2d       	mov	r19, r0
     b42:	4f 5f       	subi	r20, 0xFF	; 255
     b44:	5f 4f       	sbci	r21, 0xFF	; 255
     b46:	6f 4f       	sbci	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
     b4a:	6a 01       	movw	r12, r20
     b4c:	7b 01       	movw	r14, r22
     b4e:	97 e0       	ldi	r25, 0x07	; 7
     b50:	c9 22       	and	r12, r25
     b52:	dd 24       	eor	r13, r13
     b54:	ee 24       	eor	r14, r14
     b56:	ff 24       	eor	r15, r15
     b58:	cd 28       	or	r12, r13
     b5a:	ce 28       	or	r12, r14
     b5c:	cf 28       	or	r12, r15
     b5e:	59 f4       	brne	.+22     	; 0xb76 <freeMemoryUpdate+0x78>
     b60:	6a 01       	movw	r12, r20
     b62:	7b 01       	movw	r14, r22
     b64:	68 94       	set
     b66:	12 f8       	bld	r1, 2
     b68:	f6 94       	lsr	r15
     b6a:	e7 94       	ror	r14
     b6c:	d7 94       	ror	r13
     b6e:	c7 94       	ror	r12
     b70:	16 94       	lsr	r1
     b72:	d1 f7       	brne	.-12     	; 0xb68 <freeMemoryUpdate+0x6a>
     b74:	0f c0       	rjmp	.+30     	; 0xb94 <freeMemoryUpdate+0x96>
  else size = (size / 8) +1;
     b76:	68 94       	set
     b78:	12 f8       	bld	r1, 2
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	16 94       	lsr	r1
     b84:	d1 f7       	brne	.-12     	; 0xb7a <freeMemoryUpdate+0x7c>
     b86:	6a 01       	movw	r12, r20
     b88:	7b 01       	movw	r14, r22
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
     b8c:	c9 1a       	sub	r12, r25
     b8e:	d9 0a       	sbc	r13, r25
     b90:	e9 0a       	sbc	r14, r25
     b92:	f9 0a       	sbc	r15, r25

  if(freeClusterCountUpdated)
     b94:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <freeClusterCountUpdated>
     b98:	99 23       	and	r25, r25
     b9a:	d9 f0       	breq	.+54     	; 0xbd2 <freeMemoryUpdate+0xd4>
     b9c:	c8 2f       	mov	r28, r24
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	a9 01       	movw	r20, r18
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
	if(flag == ADD)
     bac:	c1 11       	cpse	r28, r1
     bae:	07 c0       	rjmp	.+14     	; 0xbbe <freeMemoryUpdate+0xc0>
  	   freeClusters = freeClusters + size;
     bb0:	a7 01       	movw	r20, r14
     bb2:	96 01       	movw	r18, r12
     bb4:	26 0f       	add	r18, r22
     bb6:	37 1f       	adc	r19, r23
     bb8:	48 1f       	adc	r20, r24
     bba:	59 1f       	adc	r21, r25
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <freeMemoryUpdate+0xcc>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	2c 19       	sub	r18, r12
     bc4:	3d 09       	sbc	r19, r13
     bc6:	4e 09       	sbc	r20, r14
     bc8:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
  }
}
     bd2:	cf 91       	pop	r28
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	08 95       	ret

00000bde <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     bde:	2f 92       	push	r2
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	2c 97       	sbiw	r28, 0x0c	; 12
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	8e 83       	std	Y+6, r24	; 0x06
     c14:	1b 01       	movw	r2, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     c16:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rootCluster>
     c1a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rootCluster+0x1>
     c1e:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <rootCluster+0x2>
     c22:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <rootCluster+0x3>
     c26:	8f 83       	std	Y+7, r24	; 0x07
     c28:	98 87       	std	Y+8, r25	; 0x08
     c2a:	a9 87       	std	Y+9, r26	; 0x09
     c2c:	ba 87       	std	Y+10, r27	; 0x0a
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	91 50       	subi	r25, 0x01	; 1
     c32:	99 83       	std	Y+1, r25	; 0x01
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
     c34:	0f 2e       	mov	r0, r31
     c36:	ff ef       	ldi	r31, 0xFF	; 255
     c38:	cf 2e       	mov	r12, r31
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	df 2e       	mov	r13, r31
     c3e:	f0 2d       	mov	r31, r0

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     c40:	6f 81       	ldd	r22, Y+7	; 0x07
     c42:	78 85       	ldd	r23, Y+8	; 0x08
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getFirstSector>
     c4c:	4b 01       	movw	r8, r22
     c4e:	5c 01       	movw	r10, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
     c50:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
     c54:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
     c58:	89 2b       	or	r24, r25
     c5a:	09 f4       	brne	.+2      	; 0xc5e <findFiles+0x80>
     c5c:	78 c1       	rjmp	.+752    	; 0xf4e <findFiles+0x370>
     c5e:	41 2c       	mov	r4, r1
     c60:	51 2c       	mov	r5, r1
     c62:	32 01       	movw	r6, r4
   {
     SD_readSingleBlock (firstSector + sector);
     c64:	d5 01       	movw	r26, r10
     c66:	c4 01       	movw	r24, r8
     c68:	84 0d       	add	r24, r4
     c6a:	95 1d       	adc	r25, r5
     c6c:	a6 1d       	adc	r26, r6
     c6e:	b7 1d       	adc	r27, r7
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	9b 83       	std	Y+3, r25	; 0x03
     c74:	ac 83       	std	Y+4, r26	; 0x04
     c76:	bd 83       	std	Y+5, r27	; 0x05
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
     c80:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <bytesPerSector>
     c84:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <bytesPerSector+0x1>
     c88:	89 2b       	or	r24, r25
     c8a:	09 f4       	brne	.+2      	; 0xc8e <findFiles+0xb0>
     c8c:	4f c1       	rjmp	.+670    	; 0xf2c <findFiles+0x34e>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     c8e:	ad e4       	ldi	r26, 0x4D	; 77
     c90:	b1 e0       	ldi	r27, 0x01	; 1
     c92:	8c 91       	ld	r24, X
     c94:	88 23       	and	r24, r24
     c96:	51 f0       	breq	.+20     	; 0xcac <findFiles+0xce>
     c98:	8d 01       	movw	r16, r26
     c9a:	e1 2c       	mov	r14, r1
     c9c:	f1 2c       	mov	r15, r1
     c9e:	11 c0       	rjmp	.+34     	; 0xcc2 <findFiles+0xe4>
     ca0:	00 5e       	subi	r16, 0xE0	; 224
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	f8 01       	movw	r30, r16
     ca6:	80 81       	ld	r24, Z
     ca8:	81 11       	cpse	r24, r1
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <findFiles+0xe4>
		{
		  if(flag == DELETE)
     cac:	fe 81       	ldd	r31, Y+6	; 0x06
     cae:	f2 30       	cpi	r31, 0x02	; 2
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <findFiles+0xd6>
     cb2:	6e c1       	rjmp	.+732    	; 0xf90 <findFiles+0x3b2>
		      transmitString_F(PSTR("File does not exist!"));
     cb4:	8e e2       	ldi	r24, 0x2E	; 46
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
		  return 0;   
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	6c c1       	rjmp	.+728    	; 0xf9a <findFiles+0x3bc>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     cc2:	85 3e       	cpi	r24, 0xE5	; 229
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <findFiles+0xea>
     cc6:	27 c1       	rjmp	.+590    	; 0xf16 <findFiles+0x338>
     cc8:	d8 01       	movw	r26, r16
     cca:	1b 96       	adiw	r26, 0x0b	; 11
     ccc:	8c 91       	ld	r24, X
     cce:	8f 30       	cpi	r24, 0x0F	; 15
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <findFiles+0xf6>
     cd2:	21 c1       	rjmp	.+578    	; 0xf16 <findFiles+0x338>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     cd4:	b9 81       	ldd	r27, Y+1	; 0x01
     cd6:	b2 30       	cpi	r27, 0x02	; 2
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <findFiles+0xfe>
     cda:	cf c0       	rjmp	.+414    	; 0xe7a <findFiles+0x29c>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
     cdc:	f8 01       	movw	r30, r16
     cde:	90 81       	ld	r25, Z
     ce0:	d1 01       	movw	r26, r2
     ce2:	8c 91       	ld	r24, X
     ce4:	98 13       	cpse	r25, r24
     ce6:	17 c1       	rjmp	.+558    	; 0xf16 <findFiles+0x338>
     ce8:	d8 01       	movw	r26, r16
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	f1 01       	movw	r30, r2
     cee:	31 96       	adiw	r30, 0x01	; 1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     cf0:	81 e0       	ldi	r24, 0x01	; 1
            if(dir->name[j] != fileName[j]) break;
     cf2:	2d 91       	ld	r18, X+
     cf4:	91 91       	ld	r25, Z+
     cf6:	29 13       	cpse	r18, r25
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <findFiles+0x124>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	8b 30       	cpi	r24, 0x0B	; 11
     cfe:	c9 f7       	brne	.-14     	; 0xcf2 <findFiles+0x114>
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <findFiles+0x12a>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
     d02:	8b 30       	cpi	r24, 0x0B	; 11
     d04:	09 f0       	breq	.+2      	; 0xd08 <findFiles+0x12a>
     d06:	07 c1       	rjmp	.+526    	; 0xf16 <findFiles+0x338>
			{
			  if(flag == GET_FILE)
     d08:	be 81       	ldd	r27, Y+6	; 0x06
     d0a:	b1 30       	cpi	r27, 0x01	; 1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <findFiles+0x132>
     d0e:	41 c0       	rjmp	.+130    	; 0xd92 <findFiles+0x1b4>
              {
			    appendFileSector = firstSector + sector;
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	ac 81       	ldd	r26, Y+4	; 0x04
     d16:	bd 81       	ldd	r27, Y+5	; 0x05
     d18:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <appendFileSector>
     d1c:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <appendFileSector+0x1>
     d20:	a0 93 c7 03 	sts	0x03C7, r26	; 0x8003c7 <appendFileSector+0x2>
     d24:	b0 93 c8 03 	sts	0x03C8, r27	; 0x8003c8 <appendFileSector+0x3>
				appendFileLocation = i;
     d28:	c7 01       	movw	r24, r14
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <appendFileLocation>
     d32:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <appendFileLocation+0x1>
     d36:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <appendFileLocation+0x2>
     d3a:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <appendFileLocation+0x3>
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     d3e:	d8 01       	movw	r26, r16
     d40:	54 96       	adiw	r26, 0x14	; 20
     d42:	8d 91       	ld	r24, X+
     d44:	9c 91       	ld	r25, X
     d46:	55 97       	sbiw	r26, 0x15	; 21
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	dc 01       	movw	r26, r24
     d4e:	99 27       	eor	r25, r25
     d50:	88 27       	eor	r24, r24
     d52:	f8 01       	movw	r30, r16
     d54:	42 8d       	ldd	r20, Z+26	; 0x1a
     d56:	53 8d       	ldd	r21, Z+27	; 0x1b
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	84 2b       	or	r24, r20
     d5e:	95 2b       	or	r25, r21
     d60:	a6 2b       	or	r26, r22
     d62:	b7 2b       	or	r27, r23
     d64:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <appendStartCluster>
     d68:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <appendStartCluster+0x1>
     d6c:	a0 93 5c 03 	sts	0x035C, r26	; 0x80035c <appendStartCluster+0x2>
     d70:	b0 93 5d 03 	sts	0x035D, r27	; 0x80035d <appendStartCluster+0x3>
				fileSize = dir->fileSize;
     d74:	84 8d       	ldd	r24, Z+28	; 0x1c
     d76:	95 8d       	ldd	r25, Z+29	; 0x1d
     d78:	a6 8d       	ldd	r26, Z+30	; 0x1e
     d7a:	b7 8d       	ldd	r27, Z+31	; 0x1f
     d7c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <fileSize>
     d80:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <fileSize+0x1>
     d84:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <fileSize+0x2>
     d88:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <fileSize+0x3>
			    return (dir);
     d8c:	80 2f       	mov	r24, r16
     d8e:	91 2f       	mov	r25, r17
     d90:	04 c1       	rjmp	.+520    	; 0xf9a <findFiles+0x3bc>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
     d92:	8d e0       	ldi	r24, 0x0D	; 13
     d94:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     d98:	8a e0       	ldi	r24, 0x0A	; 10
     d9a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
     d9e:	83 e2       	ldi	r24, 0x23	; 35
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
				 TX_NEWLINE;
     da6:	8d e0       	ldi	r24, 0x0D	; 13
     da8:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
				 TX_NEWLINE;
     db2:	8d e0       	ldi	r24, 0x0D	; 13
     db4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     db8:	8a e0       	ldi	r24, 0x0A	; 10
     dba:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     dbe:	d8 01       	movw	r26, r16
     dc0:	54 96       	adiw	r26, 0x14	; 20
     dc2:	cd 90       	ld	r12, X+
     dc4:	dc 90       	ld	r13, X
     dc6:	55 97       	sbiw	r26, 0x15	; 21
     dc8:	e1 2c       	mov	r14, r1
     dca:	f1 2c       	mov	r15, r1
     dcc:	d6 01       	movw	r26, r12
     dce:	99 27       	eor	r25, r25
     dd0:	88 27       	eor	r24, r24
     dd2:	f8 01       	movw	r30, r16
     dd4:	c2 8c       	ldd	r12, Z+26	; 0x1a
     dd6:	d3 8c       	ldd	r13, Z+27	; 0x1b
     dd8:	e1 2c       	mov	r14, r1
     dda:	f1 2c       	mov	r15, r1
     ddc:	c8 2a       	or	r12, r24
     dde:	d9 2a       	or	r13, r25
     de0:	ea 2a       	or	r14, r26
     de2:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
     de4:	85 ee       	ldi	r24, 0xE5	; 229
     de6:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
     de8:	6a 81       	ldd	r22, Y+2	; 0x02
     dea:	7b 81       	ldd	r23, Y+3	; 0x03
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
     df4:	d8 01       	movw	r26, r16
     df6:	5c 96       	adiw	r26, 0x1c	; 28
     df8:	4d 91       	ld	r20, X+
     dfa:	5d 91       	ld	r21, X+
     dfc:	6d 91       	ld	r22, X+
     dfe:	7c 91       	ld	r23, X
     e00:	5f 97       	sbiw	r26, 0x1f	; 31
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 7f 05 	call	0xafe	; 0xafe <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
				 if(firstCluster < cluster)
     e16:	c6 16       	cp	r12, r22
     e18:	d7 06       	cpc	r13, r23
     e1a:	e8 06       	cpc	r14, r24
     e1c:	f9 06       	cpc	r15, r25
     e1e:	30 f4       	brcc	.+12     	; 0xe2c <findFiles+0x24e>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
     e20:	a7 01       	movw	r20, r14
     e22:	96 01       	movw	r18, r12
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	10 e0       	ldi	r17, 0x00	; 0
     e30:	98 01       	movw	r18, r16
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	c7 01       	movw	r24, r14
     e36:	b6 01       	movw	r22, r12
     e38:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
     e3c:	a6 2e       	mov	r10, r22
     e3e:	b7 2e       	mov	r11, r23
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	99 83       	std	Y+1, r25	; 0x01
					getSetNextCluster (firstCluster, SET, 0);
     e44:	00 e0       	ldi	r16, 0x00	; 0
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	98 01       	movw	r18, r16
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
     e54:	ca 2c       	mov	r12, r10
     e56:	db 2c       	mov	r13, r11
     e58:	ea 80       	ldd	r14, Y+2	; 0x02
     e5a:	f9 80       	ldd	r15, Y+1	; 0x01
				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
     e5c:	b7 ef       	ldi	r27, 0xF7	; 247
     e5e:	cb 16       	cp	r12, r27
     e60:	bf ef       	ldi	r27, 0xFF	; 255
     e62:	db 06       	cpc	r13, r27
     e64:	eb 06       	cpc	r14, r27
     e66:	bf e0       	ldi	r27, 0x0F	; 15
     e68:	fb 06       	cpc	r15, r27
     e6a:	00 f3       	brcs	.-64     	; 0xe2c <findFiles+0x24e>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
     e6c:	85 e1       	ldi	r24, 0x15	; 21
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 c0       	rjmp	.+288    	; 0xf9a <findFiles+0x3bc>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
     e7a:	8d e0       	ldi	r24, 0x0D	; 13
     e7c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     e80:	8a e0       	ldi	r24, 0x0A	; 10
     e82:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     e86:	e1 e0       	ldi	r30, 0x01	; 1
     e88:	1b 86       	std	Y+11, r1	; 0x0b
     e8a:	ec 87       	std	Y+12, r30	; 0x0c
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <findFiles+0x2bc>
     e8e:	2b 85       	ldd	r18, Y+11	; 0x0b
     e90:	2f 5f       	subi	r18, 0xFF	; 255
     e92:	2b 87       	std	Y+11, r18	; 0x0b
     e94:	3c 85       	ldd	r19, Y+12	; 0x0c
     e96:	3f 5f       	subi	r19, 0xFF	; 255
     e98:	3c 87       	std	Y+12, r19	; 0x0c
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
     e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9c:	88 30       	cpi	r24, 0x08	; 8
     e9e:	59 f4       	brne	.+22     	; 0xeb6 <findFiles+0x2d8>
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
			   transmitByte (dir->name[j]);
     ea6:	f8 01       	movw	r30, r16
     ea8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eaa:	e9 0f       	add	r30, r25
     eac:	f1 1d       	adc	r31, r1
     eae:	80 81       	ld	r24, Z
     eb0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
     eb4:	ec cf       	rjmp	.-40     	; 0xe8e <findFiles+0x2b0>
     eb6:	f8 01       	movw	r30, r16
     eb8:	ab 85       	ldd	r26, Y+11	; 0x0b
     eba:	ea 0f       	add	r30, r26
     ebc:	f1 1d       	adc	r31, r1
     ebe:	80 81       	ld	r24, Z
     ec0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
     ec4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ec6:	bb 30       	cpi	r27, 0x0B	; 11
     ec8:	10 f3       	brcs	.-60     	; 0xe8e <findFiles+0x2b0>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
     eca:	81 e1       	ldi	r24, 0x11	; 17
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
     ed2:	f8 01       	movw	r30, r16
     ed4:	83 85       	ldd	r24, Z+11	; 0x0b
     ed6:	80 31       	cpi	r24, 0x10	; 16
     ed8:	a9 f0       	breq	.+42     	; 0xf04 <findFiles+0x326>
     eda:	88 30       	cpi	r24, 0x08	; 8
     edc:	c1 f0       	breq	.+48     	; 0xf0e <findFiles+0x330>
			 {
			     transmitString_F (PSTR("FILE" ));
     ede:	8c e0       	ldi	r24, 0x0C	; 12
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
		         transmitString_F (PSTR("   "));
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
     eee:	d8 01       	movw	r26, r16
     ef0:	5c 96       	adiw	r26, 0x1c	; 28
     ef2:	4d 91       	ld	r20, X+
     ef4:	5d 91       	ld	r21, X+
     ef6:	6d 91       	ld	r22, X+
     ef8:	7c 91       	ld	r23, X
     efa:	5f 97       	sbiw	r26, 0x1f	; 31
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 1e 05 	call	0xa3c	; 0xa3c <displayMemory>
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <findFiles+0x338>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
     f04:	e4 e0       	ldi	r30, 0x04	; 4
     f06:	f1 e0       	ldi	r31, 0x01	; 1
     f08:	8e 2f       	mov	r24, r30
     f0a:	9f 2f       	mov	r25, r31
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <findFiles+0x334>
     f0e:	8c 2d       	mov	r24, r12
     f10:	9d 2d       	mov	r25, r13
     f12:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     f16:	f0 e2       	ldi	r31, 0x20	; 32
     f18:	ef 0e       	add	r14, r31
     f1a:	f1 1c       	adc	r15, r1
     f1c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <bytesPerSector>
     f20:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <bytesPerSector+0x1>
     f24:	e8 16       	cp	r14, r24
     f26:	f9 06       	cpc	r15, r25
     f28:	08 f4       	brcc	.+2      	; 0xf2c <findFiles+0x34e>
     f2a:	ba ce       	rjmp	.-652    	; 0xca0 <findFiles+0xc2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	42 1a       	sub	r4, r18
     f30:	52 0a       	sbc	r5, r18
     f32:	62 0a       	sbc	r6, r18
     f34:	72 0a       	sbc	r7, r18
     f36:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
     f3a:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	48 16       	cp	r4, r24
     f44:	59 06       	cpc	r5, r25
     f46:	6a 06       	cpc	r6, r26
     f48:	7b 06       	cpc	r7, r27
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <findFiles+0x370>
     f4c:	8b ce       	rjmp	.-746    	; 0xc64 <findFiles+0x86>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
     f4e:	00 e0       	ldi	r16, 0x00	; 0
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	98 01       	movw	r18, r16
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
     f62:	6f 83       	std	Y+7, r22	; 0x07
     f64:	78 87       	std	Y+8, r23	; 0x08
     f66:	89 87       	std	Y+9, r24	; 0x09
     f68:	9a 87       	std	Y+10, r25	; 0x0a

   if(cluster > 0x0ffffff6)
     f6a:	67 3f       	cpi	r22, 0xF7	; 247
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	73 07       	cpc	r23, r19
     f70:	83 07       	cpc	r24, r19
     f72:	3f e0       	ldi	r19, 0x0F	; 15
     f74:	93 07       	cpc	r25, r19
     f76:	78 f4       	brcc	.+30     	; 0xf96 <findFiles+0x3b8>
   	 return 0;
   if(cluster == 0) 
     f78:	67 2b       	or	r22, r23
     f7a:	68 2b       	or	r22, r24
     f7c:	69 2b       	or	r22, r25
     f7e:	09 f0       	breq	.+2      	; 0xf82 <findFiles+0x3a4>
     f80:	5f ce       	rjmp	.-834    	; 0xc40 <findFiles+0x62>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
     f82:	86 ee       	ldi	r24, 0xE6	; 230
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <findFiles+0x3bc>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if(flag == DELETE)
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <findFiles+0x3bc>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
     f9a:	2c 96       	adiw	r28, 0x0c	; 12
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	9f 90       	pop	r9
     fbc:	8f 90       	pop	r8
     fbe:	7f 90       	pop	r7
     fc0:	6f 90       	pop	r6
     fc2:	5f 90       	pop	r5
     fc4:	4f 90       	pop	r4
     fc6:	3f 90       	pop	r3
     fc8:	2f 90       	pop	r2
     fca:	08 95       	ret

00000fcc <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
     fcc:	4f 92       	push	r4
     fce:	5f 92       	push	r5
     fd0:	6f 92       	push	r6
     fd2:	7f 92       	push	r7
     fd4:	8f 92       	push	r8
     fd6:	9f 92       	push	r9
     fd8:	af 92       	push	r10
     fda:	bf 92       	push	r11
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	00 d0       	rcall	.+0      	; 0xfee <readFile+0x22>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <readFile+0x24>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <readFile+0x26>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	18 2f       	mov	r17, r24
     ff8:	7a 83       	std	Y+2, r23	; 0x02
     ffa:	69 83       	std	Y+1, r22	; 0x01
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
     ffc:	cb 01       	movw	r24, r22
     ffe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <convertFileName>
if(error) return 2;
    1002:	81 11       	cpse	r24, r1
    1004:	9a c0       	rjmp	.+308    	; 0x113a <readFile+0x16e>

dir = findFiles (GET_FILE, fileName); //get the file location
    1006:	69 81       	ldd	r22, Y+1	; 0x01
    1008:	7a 81       	ldd	r23, Y+2	; 0x02
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 ef 05 	call	0xbde	; 0xbde <findFiles>
if(dir == 0) 
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	31 f4       	brne	.+12     	; 0x1020 <readFile+0x54>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	11 23       	and	r17, r17
    1018:	09 f4       	brne	.+2      	; 0x101c <readFile+0x50>
    101a:	94 c0       	rjmp	.+296    	; 0x1144 <readFile+0x178>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	92 c0       	rjmp	.+292    	; 0x1144 <readFile+0x178>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    1020:	11 30       	cpi	r17, 0x01	; 1
    1022:	09 f4       	brne	.+2      	; 0x1026 <readFile+0x5a>
    1024:	8c c0       	rjmp	.+280    	; 0x113e <readFile+0x172>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1026:	dc 01       	movw	r26, r24
    1028:	54 96       	adiw	r26, 0x14	; 20
    102a:	4d 91       	ld	r20, X+
    102c:	5c 91       	ld	r21, X
    102e:	55 97       	sbiw	r26, 0x15	; 21
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	ba 01       	movw	r22, r20
    1036:	55 27       	eor	r21, r21
    1038:	44 27       	eor	r20, r20
    103a:	5a 96       	adiw	r26, 0x1a	; 26
    103c:	cd 90       	ld	r12, X+
    103e:	dc 90       	ld	r13, X
    1040:	5b 97       	sbiw	r26, 0x1b	; 27
    1042:	e1 2c       	mov	r14, r1
    1044:	f1 2c       	mov	r15, r1
    1046:	8a 01       	movw	r16, r20
    1048:	9b 01       	movw	r18, r22
    104a:	0c 29       	or	r16, r12
    104c:	1d 29       	or	r17, r13
    104e:	2e 29       	or	r18, r14
    1050:	3f 29       	or	r19, r15
    1052:	09 83       	std	Y+1, r16	; 0x01
    1054:	1a 83       	std	Y+2, r17	; 0x02
    1056:	2b 83       	std	Y+3, r18	; 0x03
    1058:	3c 83       	std	Y+4, r19	; 0x04

fileSize = dir->fileSize;
    105a:	5c 96       	adiw	r26, 0x1c	; 28
    105c:	8d 90       	ld	r8, X+
    105e:	9d 90       	ld	r9, X+
    1060:	ad 90       	ld	r10, X+
    1062:	bc 90       	ld	r11, X
    1064:	5f 97       	sbiw	r26, 0x1f	; 31

TX_NEWLINE;
    1066:	8d e0       	ldi	r24, 0x0D	; 13
    1068:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    106c:	8a e0       	ldi	r24, 0x0A	; 10
    106e:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
TX_NEWLINE;
    1072:	8d e0       	ldi	r24, 0x0D	; 13
    1074:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1078:	8a e0       	ldi	r24, 0x0A	; 10
    107a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    107e:	c1 2c       	mov	r12, r1
    1080:	d1 2c       	mov	r13, r1
    1082:	76 01       	movw	r14, r12
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    1084:	69 81       	ldd	r22, Y+1	; 0x01
    1086:	7a 81       	ldd	r23, Y+2	; 0x02
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getFirstSector>
    1090:	2b 01       	movw	r4, r22
    1092:	3c 01       	movw	r6, r24

  for(j=0; j<sectorPerCluster; j++)
    1094:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
    1098:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    109c:	89 2b       	or	r24, r25
    109e:	a1 f1       	breq	.+104    	; 0x1108 <readFile+0x13c>
    10a0:	10 e0       	ldi	r17, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <readFile+0xdc>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    10a4:	6c 01       	movw	r12, r24
    10a6:	7d 01       	movw	r14, r26
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    10a8:	c3 01       	movw	r24, r6
    10aa:	b2 01       	movw	r22, r4
    10ac:	61 0f       	add	r22, r17
    10ae:	71 1d       	adc	r23, r1
    10b0:	81 1d       	adc	r24, r1
    10b2:	91 1d       	adc	r25, r1
    10b4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
    10b8:	1e 82       	std	Y+6, r1	; 0x06
    10ba:	1d 82       	std	Y+5, r1	; 0x05
    {
      transmitByte(buffer[k]);
    10bc:	ed 81       	ldd	r30, Y+5	; 0x05
    10be:	fe 81       	ldd	r31, Y+6	; 0x06
    10c0:	e3 5b       	subi	r30, 0xB3	; 179
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	80 81       	ld	r24, Z
    10c6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    10ca:	d7 01       	movw	r26, r14
    10cc:	c6 01       	movw	r24, r12
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	a1 1d       	adc	r26, r1
    10d2:	b1 1d       	adc	r27, r1
    10d4:	c8 14       	cp	r12, r8
    10d6:	d9 04       	cpc	r13, r9
    10d8:	ea 04       	cpc	r14, r10
    10da:	fb 04       	cpc	r15, r11
    10dc:	90 f5       	brcc	.+100    	; 0x1142 <readFile+0x176>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    10de:	2d 81       	ldd	r18, Y+5	; 0x05
    10e0:	3e 81       	ldd	r19, Y+6	; 0x06
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	3e 83       	std	Y+6, r19	; 0x06
    10e8:	2d 83       	std	Y+5, r18	; 0x05
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    10ea:	6c 01       	movw	r12, r24
    10ec:	7d 01       	movw	r14, r26

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    10ee:	21 15       	cp	r18, r1
    10f0:	32 40       	sbci	r19, 0x02	; 2
    10f2:	21 f7       	brne	.-56     	; 0x10bc <readFile+0xf0>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    10f4:	1f 5f       	subi	r17, 0xFF	; 255
    10f6:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <sectorPerCluster>
    10fa:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    10fe:	41 2f       	mov	r20, r17
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	42 17       	cp	r20, r18
    1104:	53 07       	cpc	r21, r19
    1106:	70 f2       	brcs	.-100    	; 0x10a4 <readFile+0xd8>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1108:	00 e0       	ldi	r16, 0x00	; 0
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	98 01       	movw	r18, r16
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	69 81       	ldd	r22, Y+1	; 0x01
    1112:	7a 81       	ldd	r23, Y+2	; 0x02
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
    111c:	69 83       	std	Y+1, r22	; 0x01
    111e:	7a 83       	std	Y+2, r23	; 0x02
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	9c 83       	std	Y+4, r25	; 0x04
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1124:	67 2b       	or	r22, r23
    1126:	68 2b       	or	r22, r24
    1128:	69 2b       	or	r22, r25
    112a:	09 f0       	breq	.+2      	; 0x112e <readFile+0x162>
    112c:	ab cf       	rjmp	.-170    	; 0x1084 <readFile+0xb8>
    112e:	8d ec       	ldi	r24, 0xCD	; 205
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	05 c0       	rjmp	.+10     	; 0x1144 <readFile+0x178>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <readFile+0x178>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <readFile+0x178>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1142:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    1144:	26 96       	adiw	r28, 0x06	; 6
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	bf 90       	pop	r11
    1162:	af 90       	pop	r10
    1164:	9f 90       	pop	r9
    1166:	8f 90       	pop	r8
    1168:	7f 90       	pop	r7
    116a:	6f 90       	pop	r6
    116c:	5f 90       	pop	r5
    116e:	4f 90       	pop	r4
    1170:	08 95       	ret

00001172 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1178:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <convertFileName>
  if(error) return;
    117c:	81 11       	cpse	r24, r1
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1180:	be 01       	movw	r22, r28
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	0e 94 ef 05 	call	0xbde	; 0xbde <findFiles>
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    118e:	2f 92       	push	r2
    1190:	3f 92       	push	r3
    1192:	4f 92       	push	r4
    1194:	5f 92       	push	r5
    1196:	6f 92       	push	r6
    1198:	7f 92       	push	r7
    119a:	8f 92       	push	r8
    119c:	9f 92       	push	r9
    119e:	af 92       	push	r10
    11a0:	bf 92       	push	r11
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	2e 97       	sbiw	r28, 0x0e	; 14
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    11c6:	bc 01       	movw	r22, r24
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	0e 94 e6 07 	call	0xfcc	; 0xfcc <readFile>

if(j == 1) 
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <writeFile+0x46>
    11d2:	52 c0       	rjmp	.+164    	; 0x1278 <writeFile+0xea>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    11d4:	c0 90 5a 03 	lds	r12, 0x035A	; 0x80035a <appendStartCluster>
    11d8:	d0 90 5b 03 	lds	r13, 0x035B	; 0x80035b <appendStartCluster+0x1>
    11dc:	e0 90 5c 03 	lds	r14, 0x035C	; 0x80035c <appendStartCluster+0x2>
    11e0:	f0 90 5d 03 	lds	r15, 0x035D	; 0x80035d <appendStartCluster+0x3>
  clusterCount=0;
    11e4:	81 2c       	mov	r8, r1
    11e6:	91 2c       	mov	r9, r1
    11e8:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	98 01       	movw	r18, r16
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	c7 01       	movw	r24, r14
    11f4:	b6 01       	movw	r22, r12
    11f6:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
    if(nextCluster == EOF) break;
    11fa:	6f 3f       	cpi	r22, 0xFF	; 255
    11fc:	2f ef       	ldi	r18, 0xFF	; 255
    11fe:	72 07       	cpc	r23, r18
    1200:	82 07       	cpc	r24, r18
    1202:	92 07       	cpc	r25, r18
    1204:	41 f0       	breq	.+16     	; 0x1216 <writeFile+0x88>
	cluster = nextCluster;
	clusterCount++;
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	83 1a       	sub	r8, r19
    120a:	93 0a       	sbc	r9, r19
    120c:	a3 0a       	sbc	r10, r19
    120e:	b3 0a       	sbc	r11, r19
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    1214:	ea cf       	rjmp	.-44     	; 0x11ea <writeFile+0x5c>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1216:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <sectorPerCluster>
    121a:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    121e:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <bytesPerSector>
    1222:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <bytesPerSector+0x1>
    1226:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <bytesPerSector>
    122a:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <bytesPerSector+0x1>
    122e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	c5 01       	movw	r24, r10
    1238:	b4 01       	movw	r22, r8
    123a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__mulsi3>
    123e:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <fileSize>
    1242:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <fileSize+0x1>
    1246:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <fileSize+0x2>
    124a:	30 91 3c 01 	lds	r19, 0x013C	; 0x80013c <fileSize+0x3>
    124e:	48 01       	movw	r8, r16
    1250:	59 01       	movw	r10, r18
    1252:	86 1a       	sub	r8, r22
    1254:	97 0a       	sbc	r9, r23
    1256:	a8 0a       	sbc	r10, r24
    1258:	b9 0a       	sbc	r11, r25
    125a:	c5 01       	movw	r24, r10
    125c:	b4 01       	movw	r22, r8
    125e:	9f 01       	movw	r18, r30
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
    1268:	02 2f       	mov	r16, r18
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    126a:	1b 86       	std	Y+11, r1	; 0x0b
    126c:	1a 86       	std	Y+10, r1	; 0x0a
    126e:	21 2c       	mov	r2, r1
    1270:	31 2c       	mov	r3, r1
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	29 87       	std	Y+9, r18	; 0x09
    1276:	47 c0       	rjmp	.+142    	; 0x1306 <writeFile+0x178>
}
else if(j == 2) 
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	09 f4       	brne	.+2      	; 0x127e <writeFile+0xf0>
    127c:	a2 c2       	rjmp	.+1348   	; 0x17c2 <writeFile+0x634>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
  if(cluster > totalClusters)
    128c:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <totalClusters>
    1290:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <totalClusters+0x1>
    1294:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <totalClusters+0x2>
    1298:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <totalClusters+0x3>
    129c:	06 17       	cp	r16, r22
    129e:	17 07       	cpc	r17, r23
    12a0:	28 07       	cpc	r18, r24
    12a2:	39 07       	cpc	r19, r25
    12a4:	40 f4       	brcc	.+16     	; 0x12b6 <writeFile+0x128>
     cluster = rootCluster;
    12a6:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <rootCluster>
    12aa:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <rootCluster+0x1>
    12ae:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rootCluster+0x2>
    12b2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <rootCluster+0x3>

  cluster = searchNextFreeCluster(cluster);
    12b6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <searchNextFreeCluster>
    12ba:	6b 01       	movw	r12, r22
    12bc:	7c 01       	movw	r14, r24
   if(cluster == 0)
    12be:	61 15       	cp	r22, r1
    12c0:	71 05       	cpc	r23, r1
    12c2:	81 05       	cpc	r24, r1
    12c4:	91 05       	cpc	r25, r1
    12c6:	61 f4       	brne	.+24     	; 0x12e0 <writeFile+0x152>
   {
      TX_NEWLINE;
    12c8:	8d e0       	ldi	r24, 0x0D	; 13
    12ca:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    12ce:	8a e0       	ldi	r24, 0x0A	; 10
    12d0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    12d4:	88 ea       	ldi	r24, 0xA8	; 168
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
	  return 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	76 c2       	rjmp	.+1260   	; 0x17cc <writeFile+0x63e>
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    12e0:	0f ef       	ldi	r16, 0xFF	; 255
    12e2:	1f ef       	ldi	r17, 0xFF	; 255
    12e4:	98 01       	movw	r18, r16
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    12ec:	17 01       	movw	r2, r14
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    12ee:	db 86       	std	Y+11, r13	; 0x0b
    12f0:	ca 86       	std	Y+10, r12	; 0x0a
  fileSize = 0;
    12f2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <fileSize>
    12f6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <fileSize+0x1>
    12fa:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <fileSize+0x2>
    12fe:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <fileSize+0x3>
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    1302:	00 e0       	ldi	r16, 0x00	; 0
    1304:	19 86       	std	Y+9, r1	; 0x09
    1306:	89 85       	ldd	r24, Y+9	; 0x09
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
}

k=0;
    1308:	10 e0       	ldi	r17, 0x00	; 0
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    130a:	40 2e       	mov	r4, r16
    130c:	51 2c       	mov	r5, r1
    130e:	61 2c       	mov	r6, r1
    1310:	71 2c       	mov	r7, r1
    1312:	3a 82       	std	Y+2, r3	; 0x02
    1314:	29 82       	std	Y+1, r2	; 0x01
    1316:	30 2e       	mov	r3, r16

k=0;

while(1)
{
   if(start)
    1318:	88 23       	and	r24, r24
    131a:	71 f1       	breq	.+92     	; 0x1378 <writeFile+0x1ea>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    131c:	c7 01       	movw	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getFirstSector>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	84 0d       	add	r24, r4
    132a:	95 1d       	adc	r25, r5
    132c:	a6 1d       	adc	r26, r6
    132e:	b7 1d       	adc	r27, r7
    1330:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <startBlock>
    1334:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <startBlock+0x1>
    1338:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <startBlock+0x2>
    133c:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <startBlock+0x3>
	  SD_readSingleBlock (startBlock);
    1340:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <startBlock>
    1344:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <startBlock+0x1>
    1348:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <startBlock+0x2>
    134c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <startBlock+0x3>
    1350:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    1354:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <bytesPerSector>
    1358:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <bytesPerSector+0x1>
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <fileSize>
    1364:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <fileSize+0x1>
    1368:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <fileSize+0x2>
    136c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <fileSize+0x3>
    1370:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__udivmodsi4>
	  j = sector;
    1374:	03 2d       	mov	r16, r3
    1376:	0f c0       	rjmp	.+30     	; 0x1396 <writeFile+0x208>
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1378:	c7 01       	movw	r24, r14
    137a:	b6 01       	movw	r22, r12
    137c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getFirstSector>
    1380:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <startBlock>
    1384:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <startBlock+0x1>
    1388:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <startBlock+0x2>
    138c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <startBlock+0x3>
	  i=0;
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
	  j=0;
    1394:	00 e0       	ldi	r16, 0x00	; 0
   
   
   do
   {

	 data = dataString[k++];
    1396:	88 24       	eor	r8, r8
    1398:	83 94       	inc	r8
    139a:	81 0e       	add	r8, r17
    139c:	8c 86       	std	Y+12, r8	; 0x0c
    139e:	e1 2f       	mov	r30, r17
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	e2 5a       	subi	r30, 0xA2	; 162
    13a4:	fc 4f       	sbci	r31, 0xFC	; 252
    13a6:	10 81       	ld	r17, Z
	 //transmitByte(data);
     buffer[i++] = data;
    13a8:	cb 01       	movw	r24, r22
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	fb 01       	movw	r30, r22
    13ae:	e3 5b       	subi	r30, 0xB3	; 179
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	10 83       	st	Z, r17
	 fileSize++;
    13b4:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <fileSize>
    13b8:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <fileSize+0x1>
    13bc:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <fileSize+0x2>
    13c0:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <fileSize+0x3>
    13c4:	4f 5f       	subi	r20, 0xFF	; 255
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	6f 4f       	sbci	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <fileSize>
    13d0:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <fileSize+0x1>
    13d4:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <fileSize+0x2>
    13d8:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <fileSize+0x3>
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    13dc:	81 15       	cp	r24, r1
    13de:	22 e0       	ldi	r18, 0x02	; 2
    13e0:	92 07       	cpc	r25, r18
    13e2:	50 f1       	brcs	.+84     	; 0x1438 <writeFile+0x2aa>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    13e4:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <startBlock>
    13e8:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <startBlock+0x1>
    13ec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <startBlock+0x2>
    13f0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <startBlock+0x3>
    13f4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>
       j++;
    13f8:	0f 5f       	subi	r16, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    13fa:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
    13fe:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    1402:	20 2f       	mov	r18, r16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	28 17       	cp	r18, r24
    1408:	39 07       	cpc	r19, r25
    140a:	01 f1       	breq	.+64     	; 0x144c <writeFile+0x2be>
	   startBlock++; 
    140c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <startBlock>
    1410:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <startBlock+0x1>
    1414:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <startBlock+0x2>
    1418:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <startBlock+0x3>
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	a1 1d       	adc	r26, r1
    1420:	b1 1d       	adc	r27, r1
    1422:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <startBlock>
    1426:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <startBlock+0x1>
    142a:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <startBlock+0x2>
    142e:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <startBlock+0x3>
     buffer[i++] = data;
	 fileSize++;
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	01 c0       	rjmp	.+2      	; 0x143a <writeFile+0x2ac>
   do
   {

	 data = dataString[k++];
	 //transmitByte(data);
     buffer[i++] = data;
    1438:	bc 01       	movw	r22, r24
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    143a:	1a 30       	cpi	r17, 0x0A	; 10
    143c:	71 f0       	breq	.+28     	; 0x145a <writeFile+0x2cc>
   
   
   do
   {

	 data = dataString[k++];
    143e:	1c 85       	ldd	r17, Y+12	; 0x0c
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    1440:	14 36       	cpi	r17, 0x64	; 100
    1442:	08 f4       	brcc	.+2      	; 0x1446 <writeFile+0x2b8>
    1444:	a8 cf       	rjmp	.-176    	; 0x1396 <writeFile+0x208>
    1446:	29 80       	ldd	r2, Y+1	; 0x01
    1448:	3a 80       	ldd	r3, Y+2	; 0x02
    144a:	09 c0       	rjmp	.+18     	; 0x145e <writeFile+0x2d0>
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    144c:	1a 30       	cpi	r17, 0x0A	; 10
    144e:	61 f4       	brne	.+24     	; 0x1468 <writeFile+0x2da>
    1450:	29 80       	ldd	r2, Y+1	; 0x01
    1452:	3a 80       	ldd	r3, Y+2	; 0x02
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <writeFile+0x2e8>
    145a:	29 80       	ldd	r2, Y+1	; 0x01
    145c:	3a 80       	ldd	r3, Y+2	; 0x02
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    145e:	61 15       	cp	r22, r1
    1460:	32 e0       	ldi	r19, 0x02	; 2
    1462:	73 07       	cpc	r23, r19
    1464:	40 f0       	brcs	.+16     	; 0x1476 <writeFile+0x2e8>
    1466:	11 c0       	rjmp	.+34     	; 0x148a <writeFile+0x2fc>
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    1468:	8c 85       	ldd	r24, Y+12	; 0x0c
    146a:	84 36       	cpi	r24, 0x64	; 100
    146c:	18 f1       	brcs	.+70     	; 0x14b4 <writeFile+0x326>
    146e:	29 80       	ldd	r2, Y+1	; 0x01
    1470:	3a 80       	ldd	r3, Y+2	; 0x02
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    1476:	fb 01       	movw	r30, r22
    1478:	e3 5b       	subi	r30, 0xB3	; 179
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	10 82       	st	Z, r1
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	61 15       	cp	r22, r1
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	79 07       	cpc	r23, r25
    1488:	b1 f7       	brne	.-20     	; 0x1476 <writeFile+0x2e8>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    148a:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <startBlock>
    148e:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <startBlock+0x1>
    1492:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <startBlock+0x2>
    1496:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <startBlock+0x3>
    149a:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    149e:	a7 01       	movw	r20, r14
    14a0:	96 01       	movw	r18, r12
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
/*
error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
*/
if(appendFile)  //executes this loop if file is to be appended
    14aa:	89 84       	ldd	r8, Y+9	; 0x09
    14ac:	88 20       	and	r8, r8
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <writeFile+0x324>
    14b0:	71 c0       	rjmp	.+226    	; 0x1594 <writeFile+0x406>
    14b2:	2b c0       	rjmp	.+86     	; 0x150a <writeFile+0x37c>
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    14b4:	c7 01       	movw	r24, r14
    14b6:	b6 01       	movw	r22, r12
    14b8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <searchNextFreeCluster>
    14bc:	4b 01       	movw	r8, r22
    14be:	5c 01       	movw	r10, r24

   if(cluster == 0)
    14c0:	61 15       	cp	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	81 05       	cpc	r24, r1
    14c6:	91 05       	cpc	r25, r1
    14c8:	61 f4       	brne	.+24     	; 0x14e2 <writeFile+0x354>
   {
      TX_NEWLINE;
    14ca:	8d e0       	ldi	r24, 0x0D	; 13
    14cc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    14d0:	8a e0       	ldi	r24, 0x0A	; 10
    14d2:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    14d6:	86 e9       	ldi	r24, 0x96	; 150
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
	  return 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	75 c1       	rjmp	.+746    	; 0x17cc <writeFile+0x63e>
   }

   getSetNextCluster(prevCluster, SET, cluster);
    14e2:	8b 01       	movw	r16, r22
    14e4:	9c 01       	movw	r18, r24
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	c7 01       	movw	r24, r14
    14ea:	b6 01       	movw	r22, r12
    14ec:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    14f0:	0f ef       	ldi	r16, 0xFF	; 255
    14f2:	1f ef       	ldi	r17, 0xFF	; 255
    14f4:	98 01       	movw	r18, r16
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	c5 01       	movw	r24, r10
    14fa:	b4 01       	movw	r22, r8
    14fc:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
    1500:	80 e0       	ldi	r24, 0x00	; 0
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1502:	75 01       	movw	r14, r10
    1504:	64 01       	movw	r12, r8
   
   
   do
   {

	 data = dataString[k++];
    1506:	1c 85       	ldd	r17, Y+12	; 0x0c
	  return 1;
   }

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        
    1508:	07 cf       	rjmp	.-498    	; 0x1318 <writeFile+0x18a>
error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
*/
if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    150a:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <appendFileSector>
    150e:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <appendFileSector+0x1>
    1512:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <appendFileSector+0x2>
    1516:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <appendFileSector+0x3>
    151a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    151e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <appendFileLocation>
    1522:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <appendFileLocation+0x1>
    1526:	e3 5b       	subi	r30, 0xB3	; 179
    1528:	fe 4f       	sbci	r31, 0xFE	; 254

  dir->lastAccessDate = 0;   //date of last access ignored
    152a:	13 8a       	std	Z+19, r1	; 0x13
    152c:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    152e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timeFAT>
    1532:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <timeFAT+0x1>
    1536:	97 8b       	std	Z+23, r25	; 0x17
    1538:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    153a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <dateFAT>
    153e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <dateFAT+0x1>
    1542:	91 8f       	std	Z+25, r25	; 0x19
    1544:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    1546:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <fileSize>
    154a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <fileSize+0x1>
    154e:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <fileSize+0x2>
    1552:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <fileSize+0x3>
    1556:	44 8d       	ldd	r20, Z+28	; 0x1c
    1558:	55 8d       	ldd	r21, Z+29	; 0x1d
    155a:	66 8d       	ldd	r22, Z+30	; 0x1e
    155c:	77 8d       	ldd	r23, Z+31	; 0x1f
    155e:	6c 01       	movw	r12, r24
    1560:	7d 01       	movw	r14, r26
    1562:	c4 1a       	sub	r12, r20
    1564:	d5 0a       	sbc	r13, r21
    1566:	e6 0a       	sbc	r14, r22
    1568:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    156a:	84 8f       	std	Z+28, r24	; 0x1c
    156c:	95 8f       	std	Z+29, r25	; 0x1d
    156e:	a6 8f       	std	Z+30, r26	; 0x1e
    1570:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1572:	60 91 c5 03 	lds	r22, 0x03C5	; 0x8003c5 <appendFileSector>
    1576:	70 91 c6 03 	lds	r23, 0x03C6	; 0x8003c6 <appendFileSector+0x1>
    157a:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <appendFileSector+0x2>
    157e:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <appendFileSector+0x3>
    1582:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1586:	b7 01       	movw	r22, r14
    1588:	a6 01       	movw	r20, r12
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	0e 94 7f 05 	call	0xafe	; 0xafe <freeMemoryUpdate>

  
 // TX_NEWLINE;
 // transmitString_F(PSTR(" File appended!"));

  return 0;
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	1c c1       	rjmp	.+568    	; 0x17cc <writeFile+0x63e>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1594:	80 90 43 01 	lds	r8, 0x0143	; 0x800143 <rootCluster>
    1598:	90 90 44 01 	lds	r9, 0x0144	; 0x800144 <rootCluster+0x1>
    159c:	a0 90 45 01 	lds	r10, 0x0145	; 0x800145 <rootCluster+0x2>
    15a0:	b0 90 46 01 	lds	r11, 0x0146	; 0x800146 <rootCluster+0x3>
    15a4:	89 82       	std	Y+1, r8	; 0x01
    15a6:	9a 82       	std	Y+2, r9	; 0x02
    15a8:	ab 82       	std	Y+3, r10	; 0x03
    15aa:	bc 82       	std	Y+4, r11	; 0x04
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    15ac:	61 2c       	mov	r6, r1
    15ae:	2d 81       	ldd	r18, Y+5	; 0x05
    15b0:	3e 81       	ldd	r19, Y+6	; 0x06
    15b2:	25 5f       	subi	r18, 0xF5	; 245
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    15b6:	68 94       	set
    15b8:	55 24       	eor	r5, r5
    15ba:	55 f8       	bld	r5, 5
    15bc:	ea 84       	ldd	r14, Y+10	; 0x0a
    15be:	fb 84       	ldd	r15, Y+11	; 0x0b
    15c0:	46 2c       	mov	r4, r6
    15c2:	6d 80       	ldd	r6, Y+5	; 0x05
    15c4:	7e 80       	ldd	r7, Y+6	; 0x06
    15c6:	3e 87       	std	Y+14, r19	; 0x0e
    15c8:	2d 87       	std	Y+13, r18	; 0x0d

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    15ca:	69 81       	ldd	r22, Y+1	; 0x01
    15cc:	7a 81       	ldd	r23, Y+2	; 0x02
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getFirstSector>
    15d6:	6d 83       	std	Y+5, r22	; 0x05
    15d8:	7e 83       	std	Y+6, r23	; 0x06
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    15de:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
    15e2:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    15e6:	89 2b       	or	r24, r25
    15e8:	09 f4       	brne	.+2      	; 0x15ec <writeFile+0x45e>
    15ea:	98 c0       	rjmp	.+304    	; 0x171c <writeFile+0x58e>
    15ec:	d1 2c       	mov	r13, r1
   {
     SD_readSingleBlock (firstSector + sector);
    15ee:	8d 80       	ldd	r8, Y+5	; 0x05
    15f0:	9e 80       	ldd	r9, Y+6	; 0x06
    15f2:	af 80       	ldd	r10, Y+7	; 0x07
    15f4:	b8 84       	ldd	r11, Y+8	; 0x08
    15f6:	8d 0c       	add	r8, r13
    15f8:	91 1c       	adc	r9, r1
    15fa:	a1 1c       	adc	r10, r1
    15fc:	b1 1c       	adc	r11, r1
    15fe:	c5 01       	movw	r24, r10
    1600:	b4 01       	movw	r22, r8
    1602:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1606:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <bytesPerSector>
    160a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <bytesPerSector+0x1>
    160e:	89 2b       	or	r24, r25
    1610:	09 f4       	brne	.+2      	; 0x1614 <writeFile+0x486>
    1612:	79 c0       	rjmp	.+242    	; 0x1706 <writeFile+0x578>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1614:	41 10       	cpse	r4, r1
    1616:	d7 c0       	rjmp	.+430    	; 0x17c6 <writeFile+0x638>
    1618:	8d e4       	ldi	r24, 0x4D	; 77
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	00 e0       	ldi	r16, 0x00	; 0
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <writeFile+0x496>
    1622:	80 96       	adiw	r24, 0x20	; 32
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1624:	dc 01       	movw	r26, r24
    1626:	2c 91       	ld	r18, X
    1628:	22 23       	and	r18, r18
    162a:	19 f0       	breq	.+6      	; 0x1632 <writeFile+0x4a4>
    162c:	25 3e       	cpi	r18, 0xE5	; 229
    162e:	09 f0       	breq	.+2      	; 0x1632 <writeFile+0x4a4>
    1630:	60 c0       	rjmp	.+192    	; 0x16f2 <writeFile+0x564>
    1632:	f3 01       	movw	r30, r6
    1634:	dc 01       	movw	r26, r24
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1636:	21 91       	ld	r18, Z+
    1638:	2d 93       	st	X+, r18
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    163a:	2d 85       	ldd	r18, Y+13	; 0x0d
    163c:	3e 85       	ldd	r19, Y+14	; 0x0e
    163e:	e2 17       	cp	r30, r18
    1640:	f3 07       	cpc	r31, r19
    1642:	c9 f7       	brne	.-14     	; 0x1636 <writeFile+0x4a8>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1644:	dc 01       	movw	r26, r24
    1646:	1b 96       	adiw	r26, 0x0b	; 11
    1648:	5c 92       	st	X, r5
    164a:	1b 97       	sbiw	r26, 0x0b	; 11
		  dir->NTreserved = 0;			//always set to 0
    164c:	1c 96       	adiw	r26, 0x0c	; 12
    164e:	1c 92       	st	X, r1
    1650:	1c 97       	sbiw	r26, 0x0c	; 12
		  dir->timeTenth = 0;			//always set to 0
    1652:	1d 96       	adiw	r26, 0x0d	; 13
    1654:	1c 92       	st	X, r1
    1656:	1d 97       	sbiw	r26, 0x0d	; 13
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    1658:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <timeFAT>
    165c:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <timeFAT+0x1>
    1660:	1f 96       	adiw	r26, 0x0f	; 15
    1662:	5c 93       	st	X, r21
    1664:	4e 93       	st	-X, r20
    1666:	1e 97       	sbiw	r26, 0x0e	; 14
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    1668:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <dateFAT>
    166c:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <dateFAT+0x1>
    1670:	51 96       	adiw	r26, 0x11	; 17
    1672:	3c 93       	st	X, r19
    1674:	2e 93       	st	-X, r18
    1676:	50 97       	sbiw	r26, 0x10	; 16
		  dir->lastAccessDate = 0;   	//date of last access ignored
    1678:	53 96       	adiw	r26, 0x13	; 19
    167a:	1c 92       	st	X, r1
    167c:	1e 92       	st	-X, r1
    167e:	52 97       	sbiw	r26, 0x12	; 18
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    1680:	57 96       	adiw	r26, 0x17	; 23
    1682:	5c 93       	st	X, r21
    1684:	4e 93       	st	-X, r20
    1686:	56 97       	sbiw	r26, 0x16	; 22
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    1688:	59 96       	adiw	r26, 0x19	; 25
    168a:	3c 93       	st	X, r19
    168c:	2e 93       	st	-X, r18
    168e:	58 97       	sbiw	r26, 0x18	; 24
		  dir->firstClusterHI = firstClusterHigh;
    1690:	55 96       	adiw	r26, 0x15	; 21
    1692:	3c 92       	st	X, r3
    1694:	2e 92       	st	-X, r2
    1696:	54 97       	sbiw	r26, 0x14	; 20
		  dir->firstClusterLO = firstClusterLow;
    1698:	5b 96       	adiw	r26, 0x1b	; 27
    169a:	fc 92       	st	X, r15
    169c:	ee 92       	st	-X, r14
    169e:	5a 97       	sbiw	r26, 0x1a	; 26
		  dir->fileSize = fileSize;
    16a0:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <fileSize>
    16a4:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <fileSize+0x1>
    16a8:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <fileSize+0x2>
    16ac:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <fileSize+0x3>
    16b0:	fc 01       	movw	r30, r24
    16b2:	44 8f       	std	Z+28, r20	; 0x1c
    16b4:	55 8f       	std	Z+29, r21	; 0x1d
    16b6:	66 8f       	std	Z+30, r22	; 0x1e
    16b8:	77 8f       	std	Z+31, r23	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    16ba:	c5 01       	movw	r24, r10
    16bc:	b4 01       	movw	r22, r8
    16be:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <SD_writeSingleBlock>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    16c2:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <fileSize>
    16c6:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <fileSize+0x1>
    16ca:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <fileSize+0x2>
    16ce:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <fileSize+0x3>
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 7f 05 	call	0xafe	; 0xafe <freeMemoryUpdate>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    16d8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <bytesPerSector>
    16dc:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <bytesPerSector+0x1>
    16e0:	00 5e       	subi	r16, 0xE0	; 224
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	08 17       	cp	r16, r24
    16e6:	19 07       	cpc	r17, r25
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <writeFile+0x55e>
    16ea:	6f c0       	rjmp	.+222    	; 0x17ca <writeFile+0x63c>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    16ec:	44 24       	eor	r4, r4
    16ee:	43 94       	inc	r4
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <writeFile+0x578>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    16f2:	00 5e       	subi	r16, 0xE0	; 224
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <bytesPerSector>
    16fa:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <bytesPerSector+0x1>
    16fe:	02 17       	cp	r16, r18
    1700:	13 07       	cpc	r17, r19
    1702:	08 f4       	brcc	.+2      	; 0x1706 <writeFile+0x578>
    1704:	8e cf       	rjmp	.-228    	; 0x1622 <writeFile+0x494>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1706:	d3 94       	inc	r13
    1708:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <sectorPerCluster>
    170c:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <sectorPerCluster+0x1>
    1710:	2d 2d       	mov	r18, r13
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	28 17       	cp	r18, r24
    1716:	39 07       	cpc	r19, r25
    1718:	08 f4       	brcc	.+2      	; 0x171c <writeFile+0x58e>
    171a:	69 cf       	rjmp	.-302    	; 0x15ee <writeFile+0x460>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    171c:	00 e0       	ldi	r16, 0x00	; 0
    171e:	10 e0       	ldi	r17, 0x00	; 0
    1720:	98 01       	movw	r18, r16
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	69 81       	ldd	r22, Y+1	; 0x01
    1726:	7a 81       	ldd	r23, Y+2	; 0x02
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>

   if(cluster > 0x0ffffff6)
    1730:	67 3f       	cpi	r22, 0xF7	; 247
    1732:	2f ef       	ldi	r18, 0xFF	; 255
    1734:	72 07       	cpc	r23, r18
    1736:	82 07       	cpc	r24, r18
    1738:	2f e0       	ldi	r18, 0x0F	; 15
    173a:	92 07       	cpc	r25, r18
    173c:	78 f1       	brcs	.+94     	; 0x179c <writeFile+0x60e>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    173e:	6f 3f       	cpi	r22, 0xFF	; 255
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	21 f5       	brne	.+72     	; 0x1790 <writeFile+0x602>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1748:	69 81       	ldd	r22, Y+1	; 0x01
    174a:	7a 81       	ldd	r23, Y+2	; 0x02
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <searchNextFreeCluster>
    1754:	a6 2e       	mov	r10, r22
    1756:	b7 2e       	mov	r11, r23
    1758:	c8 2e       	mov	r12, r24
    175a:	d9 2e       	mov	r13, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    175c:	06 2f       	mov	r16, r22
    175e:	17 2f       	mov	r17, r23
    1760:	28 2f       	mov	r18, r24
    1762:	39 2f       	mov	r19, r25
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	69 81       	ldd	r22, Y+1	; 0x01
    1768:	7a 81       	ldd	r23, Y+2	; 0x02
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1772:	0f ef       	ldi	r16, 0xFF	; 255
    1774:	1f ef       	ldi	r17, 0xFF	; 255
    1776:	98 01       	movw	r18, r16
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	6a 2d       	mov	r22, r10
    177c:	7b 2d       	mov	r23, r11
    177e:	8c 2d       	mov	r24, r12
    1780:	9d 2d       	mov	r25, r13
    1782:	0e 94 20 02 	call	0x440	; 0x440 <getSetNextCluster>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1786:	a9 82       	std	Y+1, r10	; 0x01
    1788:	ba 82       	std	Y+2, r11	; 0x02
    178a:	cb 82       	std	Y+3, r12	; 0x03
    178c:	dc 82       	std	Y+4, r13	; 0x04
    178e:	0a c0       	rjmp	.+20     	; 0x17a4 <writeFile+0x616>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1790:	81 e8       	ldi	r24, 0x81	; 129
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
	    return 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	18 c0       	rjmp	.+48     	; 0x17cc <writeFile+0x63e>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    179c:	69 83       	std	Y+1, r22	; 0x01
    179e:	7a 83       	std	Y+2, r23	; 0x02
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	9c 83       	std	Y+4, r25	; 0x04
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return 1;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    17a4:	89 80       	ldd	r8, Y+1	; 0x01
    17a6:	9a 80       	ldd	r9, Y+2	; 0x02
    17a8:	ab 80       	ldd	r10, Y+3	; 0x03
    17aa:	bc 80       	ldd	r11, Y+4	; 0x04
    17ac:	89 28       	or	r8, r9
    17ae:	8a 28       	or	r8, r10
    17b0:	8b 28       	or	r8, r11
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <writeFile+0x628>
    17b4:	0a cf       	rjmp	.-492    	; 0x15ca <writeFile+0x43c>
    17b6:	88 e6       	ldi	r24, 0x68	; 104
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <writeFile+0x63e>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <writeFile+0x63e>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <writeFile+0x63e>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
   
   prevCluster = cluster;
 }
 
 return 0;
}
    17cc:	2e 96       	adiw	r28, 0x0e	; 14
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	7f 90       	pop	r7
    17f2:	6f 90       	pop	r6
    17f4:	5f 90       	pop	r5
    17f6:	4f 90       	pop	r4
    17f8:	3f 90       	pop	r3
    17fa:	2f 90       	pop	r2
    17fc:	08 95       	ret

000017fe <port_init>:
#define RED_LED_OFF		PORTC &= ~0x40


void port_init(void)
{
  PORTB = 0x00;		  //pull-up on for pushbutton
    17fe:	15 b8       	out	0x05, r1	; 5
  DDRB  = 0xef;		  //MISO line i/p, rest o/p
    1800:	8f ee       	ldi	r24, 0xEF	; 239
    1802:	84 b9       	out	0x04, r24	; 4
  PORTC = 0x80;		  //pull-up for push-button
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	88 b9       	out	0x08, r24	; 8
  DDRC  = 0x60;		  //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
    1808:	80 e6       	ldi	r24, 0x60	; 96
    180a:	87 b9       	out	0x07, r24	; 7
    180c:	08 95       	ret

0000180e <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
  cli();  //all interrupts disabled
    180e:	f8 94       	cli
  port_init();
    1810:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <port_init>
  spi_init();
    1814:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <spi_init>
  uart0_init();
    1818:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <uart0_init>
    181c:	08 95       	ret

0000181e <blinkRedLED>:
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    181e:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1820:	2f ef       	ldi	r18, 0xFF	; 255
    1822:	87 e8       	ldi	r24, 0x87	; 135
    1824:	93 e1       	ldi	r25, 0x13	; 19
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	80 40       	sbci	r24, 0x00	; 0
    182a:	90 40       	sbci	r25, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <blinkRedLED+0x8>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <blinkRedLED+0x12>
    1830:	00 00       	nop
	_delay_ms(400);
	RED_LED_OFF;
    1832:	46 98       	cbi	0x08, 6	; 8
    1834:	2f ef       	ldi	r18, 0xFF	; 255
    1836:	87 e8       	ldi	r24, 0x87	; 135
    1838:	93 e1       	ldi	r25, 0x13	; 19
    183a:	21 50       	subi	r18, 0x01	; 1
    183c:	80 40       	sbci	r24, 0x00	; 0
    183e:	90 40       	sbci	r25, 0x00	; 0
    1840:	e1 f7       	brne	.-8      	; 0x183a <blinkRedLED+0x1c>
    1842:	00 c0       	rjmp	.+0      	; 0x1844 <blinkRedLED+0x26>
    1844:	00 00       	nop
    1846:	eb cf       	rjmp	.-42     	; 0x181e <blinkRedLED>

00001848 <main>:

}

//*************************** MAIN *******************************//
int main(void)
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	29 97       	sbiw	r28, 0x09	; 9
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
  unsigned char option, error, i, j, data, channel;
  unsigned char fileName[] = "test.txt";
    185c:	89 e0       	ldi	r24, 0x09	; 9
    185e:	ee e1       	ldi	r30, 0x1E	; 30
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	de 01       	movw	r26, r28
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	01 90       	ld	r0, Z+
    1868:	0d 92       	st	X+, r0
    186a:	8a 95       	dec	r24
    186c:	e1 f7       	brne	.-8      	; 0x1866 <main+0x1e>
    186e:	2f ef       	ldi	r18, 0xFF	; 255
    1870:	81 ee       	ldi	r24, 0xE1	; 225
    1872:	94 e0       	ldi	r25, 0x04	; 4
    1874:	21 50       	subi	r18, 0x01	; 1
    1876:	80 40       	sbci	r24, 0x00	; 0
    1878:	90 40       	sbci	r25, 0x00	; 0
    187a:	e1 f7       	brne	.-8      	; 0x1874 <main+0x2c>
    187c:	00 c0       	rjmp	.+0      	; 0x187e <main+0x36>
    187e:	00 00       	nop
  unsigned int delay, k;

  _delay_ms(100);  //delay for VCC stabilization

  init_devices();
    1880:	0e 94 07 0c 	call	0x180e	; 0x180e <init_devices>

  GREEN_LED_ON;  //turn on green LED to indicate power on
    1884:	45 9a       	sbi	0x08, 5	; 8
  RED_LED_OFF; 	 //keep red LED off for now
    1886:	46 98       	cbi	0x08, 6	; 8

  transmitString_F (PSTR("\n\r\n\r****************************************************"));
    1888:	87 e8       	ldi	r24, 0x87	; 135
    188a:	93 e0       	ldi	r25, 0x03	; 3
    188c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  transmitString_F (PSTR("\n\r         microSD ATMEGA328P "));
    1890:	88 e6       	ldi	r24, 0x68	; 104
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  transmitString_F (PSTR("\n\r****************************************************\n\r"));
    1898:	8f e2       	ldi	r24, 0x2F	; 47
    189a:	93 e0       	ldi	r25, 0x03	; 3
    189c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>

  cardType = 0;
    18a0:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <cardType>
    18a4:	1a e0       	ldi	r17, 0x0A	; 10

  for (i=0; i<10; i++)
  {
  	error = SD_init();
    18a6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <SD_init>
  	if(!error) break;
    18aa:	88 23       	and	r24, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <main+0x68>
    18ae:	44 c1       	rjmp	.+648    	; 0x1b38 <main+0x2f0>
    18b0:	11 50       	subi	r17, 0x01	; 1
  transmitString_F (PSTR("\n\r         microSD ATMEGA328P "));
  transmitString_F (PSTR("\n\r****************************************************\n\r"));

  cardType = 0;

  for (i=0; i<10; i++)
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <main+0x5e>
    18b4:	4d c1       	rjmp	.+666    	; 0x1b50 <main+0x308>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    18b6:	88 e1       	ldi	r24, 0x18	; 24
    18b8:	93 e0       	ldi	r25, 0x03	; 3
    18ba:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <main+0x84>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	21 f4       	brne	.+8      	; 0x18cc <main+0x84>
    18c4:	8b ef       	ldi	r24, 0xFB	; 251
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  
  	blinkRedLED();
    18cc:	0e 94 0f 0c 	call	0x181e	; 0x181e <blinkRedLED>
  }

  switch (cardType)
  {
  	case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    18d0:	80 ed       	ldi	r24, 0xD0	; 208
    18d2:	92 e0       	ldi	r25, 0x02	; 2
    18d4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  		   break;
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <main+0xae>
  	case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    18da:	83 eb       	ldi	r24, 0xB3	; 179
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  		   break;
    18e2:	09 c0       	rjmp	.+18     	; 0x18f6 <main+0xae>
  	case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    18e4:	88 e8       	ldi	r24, 0x88	; 136
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  		   break;
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <main+0xae>
  	default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    18ee:	8e e6       	ldi	r24, 0x6E	; 110
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  		   break; 
  }

  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    18f6:	0e 94 2b 03 	call	0x656	; 0x656 <getBootSectorData>
  if(error) 
    18fa:	88 23       	and	r24, r24
    18fc:	31 f0       	breq	.+12     	; 0x190a <main+0xc2>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
    18fe:	8b e5       	ldi	r24, 0x5B	; 91
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
   	blinkRedLED();
    1906:	0e 94 0f 0c 	call	0x181e	; 0x181e <blinkRedLED>
  }

  SPI_HIGH_SPEED;	//SCK - 4 MHz
    190a:	80 e5       	ldi	r24, 0x50	; 80
    190c:	8c bd       	out	0x2c, r24	; 44
    190e:	8d b5       	in	r24, 0x2d	; 45
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	8d bd       	out	0x2d, r24	; 45
    1914:	ef e9       	ldi	r30, 0x9F	; 159
    1916:	ff e0       	ldi	r31, 0x0F	; 15
    1918:	31 97       	sbiw	r30, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <main+0xd0>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <main+0xd6>
    191e:	00 00       	nop
		case '2':TX_NEWLINE;		
				//From here onwards, gather data by appending strings in dataString
				//dataString is declared in FAT32.h
				//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h

				for(i=0; i<10; i++) dataString[i] = 'A';
    1920:	0f 2e       	mov	r0, r31
    1922:	f1 e4       	ldi	r31, 0x41	; 65
    1924:	cf 2e       	mov	r12, r31
    1926:	f0 2d       	mov	r31, r0
				dataString[i++] = ',';
    1928:	0e e5       	ldi	r16, 0x5E	; 94
    192a:	13 e0       	ldi	r17, 0x03	; 3
    192c:	0f 2e       	mov	r0, r31
    192e:	fc e2       	ldi	r31, 0x2C	; 44
    1930:	df 2e       	mov	r13, r31
    1932:	f0 2d       	mov	r31, r0

				for(j=0;j<8; j++)  dataString[i++] = i+'0';
    1934:	0f 2e       	mov	r0, r31
    1936:	fc e3       	ldi	r31, 0x3C	; 60
    1938:	3f 2e       	mov	r3, r31
    193a:	f0 2d       	mov	r31, r0
    193c:	0f 2e       	mov	r0, r31
    193e:	fd e3       	ldi	r31, 0x3D	; 61
    1940:	4f 2e       	mov	r4, r31
    1942:	f0 2d       	mov	r31, r0
    1944:	0f 2e       	mov	r0, r31
    1946:	fe e3       	ldi	r31, 0x3E	; 62
    1948:	5f 2e       	mov	r5, r31
    194a:	f0 2d       	mov	r31, r0
    194c:	0f 2e       	mov	r0, r31
    194e:	ff e3       	ldi	r31, 0x3F	; 63
    1950:	6f 2e       	mov	r6, r31
    1952:	f0 2d       	mov	r31, r0
    1954:	68 94       	set
    1956:	77 24       	eor	r7, r7
    1958:	76 f8       	bld	r7, 6
    195a:	0f 2e       	mov	r0, r31
    195c:	f2 e4       	ldi	r31, 0x42	; 66
    195e:	8f 2e       	mov	r8, r31
    1960:	f0 2d       	mov	r31, r0
    1962:	0f 2e       	mov	r0, r31
    1964:	f3 e4       	ldi	r31, 0x43	; 67
    1966:	9f 2e       	mov	r9, r31
    1968:	f0 2d       	mov	r31, r0
    196a:	5e 01       	movw	r10, r28
    196c:	fe e0       	ldi	r31, 0x0E	; 14
    196e:	af 0e       	add	r10, r31
    1970:	b1 1c       	adc	r11, r1
 //simply wait for start recording command (i.e. pressing of key afterwards)


  while(1)
  {
  	transmitString_F(PSTR("\n\r\n\r> 0 : Exit the Menu"));
    1972:	83 e4       	ldi	r24, 0x43	; 67
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 1 : Get file list"));
    197a:	8d e2       	ldi	r24, 0x2D	; 45
    197c:	92 e0       	ldi	r25, 0x02	; 2
    197e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 2 : Write Test File"));
    1982:	85 e1       	ldi	r24, 0x15	; 21
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 3 : Read File"));
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	92 e0       	ldi	r25, 0x02	; 2
    198e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 4 : Delete File"));
    1992:	8f ee       	ldi	r24, 0xEF	; 239
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	transmitString_F(PSTR("\n\r> 5 : Display Memory"));
    199a:	88 ed       	ldi	r24, 0xD8	; 216
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>

  	transmitString_F(PSTR("\n\r\n\r> Enter the option:"));
    19a2:	80 ec       	ldi	r24, 0xC0	; 192
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
  	option = receiveByte();
    19aa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <receiveByte>
    19ae:	28 2e       	mov	r2, r24
  	transmitByte(option);
    19b0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>


	switch (option)
    19b4:	22 e3       	ldi	r18, 0x32	; 50
    19b6:	22 16       	cp	r2, r18
    19b8:	21 f1       	breq	.+72     	; 0x1a02 <main+0x1ba>
    19ba:	22 15       	cp	r18, r2
    19bc:	38 f0       	brcs	.+14     	; 0x19cc <main+0x184>
    19be:	80 e3       	ldi	r24, 0x30	; 48
    19c0:	28 16       	cp	r2, r24
    19c2:	69 f0       	breq	.+26     	; 0x19de <main+0x196>
    19c4:	91 e3       	ldi	r25, 0x31	; 49
    19c6:	29 16       	cp	r2, r25
    19c8:	81 f0       	breq	.+32     	; 0x19ea <main+0x1a2>
    19ca:	b0 c0       	rjmp	.+352    	; 0x1b2c <main+0x2e4>
    19cc:	e4 e3       	ldi	r30, 0x34	; 52
    19ce:	e2 15       	cp	r30, r2
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <main+0x18c>
    19d2:	42 c0       	rjmp	.+132    	; 0x1a58 <main+0x210>
    19d4:	f5 e3       	ldi	r31, 0x35	; 53
    19d6:	2f 16       	cp	r2, r31
    19d8:	09 f4       	brne	.+2      	; 0x19dc <main+0x194>
    19da:	9b c0       	rjmp	.+310    	; 0x1b12 <main+0x2ca>
    19dc:	a7 c0       	rjmp	.+334    	; 0x1b2c <main+0x2e4>
	{
		case '0':transmitString_F(PSTR("\n\Operation Stopped.."));
    19de:	8b ea       	ldi	r24, 0xAB	; 171
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
	while(1)
	{
		
	}//end of while(1)
	STOP: 
	RED_LED_OFF;  //recording stopped
    19e6:	46 98       	cbi	0x08, 6	; 8

  }//end of while(1)
    19e8:	a6 c0       	rjmp	.+332    	; 0x1b36 <main+0x2ee>

	switch (option)
	{
		case '0':transmitString_F(PSTR("\n\Operation Stopped.."));
		  		 goto STOP;
		case '1':TX_NEWLINE;
    19ea:	8d e0       	ldi	r24, 0x0D	; 13
    19ec:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    19f0:	8a e0       	ldi	r24, 0x0A	; 10
    19f2:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
		  		 findFiles(GET_LIST,0);
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 ef 05 	call	0xbde	; 0xbde <findFiles>
		  		 break;
    1a00:	b8 cf       	rjmp	.-144    	; 0x1972 <main+0x12a>

		case '2':TX_NEWLINE;		
    1a02:	8d e0       	ldi	r24, 0x0D	; 13
    1a04:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1a08:	8a e0       	ldi	r24, 0x0A	; 10
    1a0a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
				//From here onwards, gather data by appending strings in dataString
				//dataString is declared in FAT32.h
				//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h

				for(i=0; i<10; i++) dataString[i] = 'A';
    1a12:	fc 01       	movw	r30, r24
    1a14:	e2 5a       	subi	r30, 0xA2	; 162
    1a16:	fc 4f       	sbci	r31, 0xFC	; 252
    1a18:	c0 82       	st	Z, r12
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	8a 30       	cpi	r24, 0x0A	; 10
    1a1e:	91 05       	cpc	r25, r1
    1a20:	c1 f7       	brne	.-16     	; 0x1a12 <main+0x1ca>
				dataString[i++] = ',';
    1a22:	f8 01       	movw	r30, r16
    1a24:	d2 86       	std	Z+10, r13	; 0x0a

				for(j=0;j<8; j++)  dataString[i++] = i+'0';
    1a26:	33 86       	std	Z+11, r3	; 0x0b
    1a28:	44 86       	std	Z+12, r4	; 0x0c
    1a2a:	55 86       	std	Z+13, r5	; 0x0d
    1a2c:	66 86       	std	Z+14, r6	; 0x0e
    1a2e:	77 86       	std	Z+15, r7	; 0x0f
    1a30:	c0 8a       	std	Z+16, r12	; 0x10
    1a32:	81 8a       	std	Z+17, r8	; 0x11
    1a34:	92 8a       	std	Z+18, r9	; 0x12
				dataString[i++] = ',';
    1a36:	d3 8a       	std	Z+19, r13	; 0x13
				transmitString_F(PSTR("Writing ..."));
    1a38:	8f e9       	ldi	r24, 0x9F	; 159
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
				error = writeFile("tests.txt");
    1a40:	84 e1       	ldi	r24, 0x14	; 20
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0e 94 c7 08 	call	0x118e	; 0x118e <writeFile>
				if(error) blinkRedLED();
    1a48:	81 11       	cpse	r24, r1
    1a4a:	0e 94 0f 0c 	call	0x181e	; 0x181e <blinkRedLED>
				transmitString_F(PSTR("Done"));
    1a4e:	8a e9       	ldi	r24, 0x9A	; 154
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
				break;
    1a56:	8d cf       	rjmp	.-230    	; 0x1972 <main+0x12a>

		case '3':
		case '4':transmitString_F(PSTR("\n\rEnter file name: "));
    1a58:	86 e8       	ldi	r24, 0x86	; 134
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    1a60:	fe 01       	movw	r30, r28
    1a62:	31 96       	adiw	r30, 0x01	; 1
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
    1a64:	11 92       	st	Z+, r1
				transmitString_F(PSTR("Done"));
				break;

		case '3':
		case '4':transmitString_F(PSTR("\n\rEnter file name: "));
          		 for(i=0; i<13; i++)
    1a66:	ea 15       	cp	r30, r10
    1a68:	fb 05       	cpc	r31, r11
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <main+0x21c>
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <main+0x22a>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
					transmitByte(data);
            		fileName[i++] = data;
    1a70:	f8 2e       	mov	r15, r24
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
          		 i=0;
          		 while(1)
          		 {
            		data = receiveByte();
    1a72:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <receiveByte>
    1a76:	e8 2e       	mov	r14, r24
            		if(data == 0x0d) break;  //'ENTER' key pressed
    1a78:	fd e0       	ldi	r31, 0x0D	; 13
    1a7a:	8f 17       	cp	r24, r31
    1a7c:	39 f1       	breq	.+78     	; 0x1acc <main+0x284>
					if(data == 0x08)	//'Back Space' key pressed
    1a7e:	28 e0       	ldi	r18, 0x08	; 8
    1a80:	82 13       	cpse	r24, r18
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <main+0x256>
	 				{ 
	   					if(i != 0)
    1a84:	ff 20       	and	r15, r15
    1a86:	a9 f3       	breq	.-22     	; 0x1a72 <main+0x22a>
	   					{ 
	     					transmitByte(data);
    1a88:	88 e0       	ldi	r24, 0x08	; 8
    1a8a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
							transmitByte(' '); 
    1a8e:	80 e2       	ldi	r24, 0x20	; 32
    1a90:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
	     					transmitByte(data); 
    1a94:	88 e0       	ldi	r24, 0x08	; 8
    1a96:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
	     					i--; 
    1a9a:	fa 94       	dec	r15
    1a9c:	ea cf       	rjmp	.-44     	; 0x1a72 <main+0x22a>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    1a9e:	80 ee       	ldi	r24, 0xE0	; 224
    1aa0:	8e 0d       	add	r24, r14
    1aa2:	8f 35       	cpi	r24, 0x5F	; 95
    1aa4:	30 f7       	brcc	.-52     	; 0x1a72 <main+0x22a>
					transmitByte(data);
    1aa6:	8e 2d       	mov	r24, r14
    1aa8:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
            		fileName[i++] = data;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	8f 0d       	add	r24, r15
    1ab0:	e1 e0       	ldi	r30, 0x01	; 1
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	ec 0f       	add	r30, r28
    1ab6:	fd 1f       	adc	r31, r29
    1ab8:	ef 0d       	add	r30, r15
    1aba:	f1 1d       	adc	r31, r1
    1abc:	e0 82       	st	Z, r14
            		if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    1abe:	8d 30       	cpi	r24, 0x0D	; 13
    1ac0:	b9 f6       	brne	.-82     	; 0x1a70 <main+0x228>
    1ac2:	80 e7       	ldi	r24, 0x70	; 112
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    1aca:	53 cf       	rjmp	.-346    	; 0x1972 <main+0x12a>
          		}
          		if(i>12) break;
    1acc:	8c e0       	ldi	r24, 0x0C	; 12
    1ace:	8f 15       	cp	r24, r15
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <main+0x28c>
    1ad2:	4f cf       	rjmp	.-354    	; 0x1972 <main+0x12a>
       
	      		TX_NEWLINE;
    1ad4:	8d e0       	ldi	r24, 0x0D	; 13
    1ad6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1ada:	8a e0       	ldi	r24, 0x0A	; 10
    1adc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
		  		if(option == '3') 
    1ae0:	93 e3       	ldi	r25, 0x33	; 51
    1ae2:	29 12       	cpse	r2, r25
    1ae4:	0e c0       	rjmp	.+28     	; 0x1b02 <main+0x2ba>
				{ 
					error = readFile( READ, fileName);
    1ae6:	be 01       	movw	r22, r28
    1ae8:	6f 5f       	subi	r22, 0xFF	; 255
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	0e 94 e6 07 	call	0xfcc	; 0xfcc <readFile>
					if(error == 1) transmitString_F(PSTR("File does not exist.."));
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <main+0x2b0>
    1af6:	3d cf       	rjmp	.-390    	; 0x1972 <main+0x12a>
    1af8:	8a e5       	ldi	r24, 0x5A	; 90
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    1b00:	38 cf       	rjmp	.-400    	; 0x1972 <main+0x12a>
				}
		  		if(option == '4') deleteFile(fileName);
    1b02:	e4 e3       	ldi	r30, 0x34	; 52
    1b04:	2e 12       	cpse	r2, r30
    1b06:	35 cf       	rjmp	.-406    	; 0x1972 <main+0x12a>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	0e 94 b9 08 	call	0x1172	; 0x1172 <deleteFile>
    1b10:	30 cf       	rjmp	.-416    	; 0x1972 <main+0x12a>
          		break;
		case '5':
				displayMemory(HIGH,getSetFreeCluster(TOTAL_FREE,GET,0));
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 99 02 	call	0x532	; 0x532 <getSetFreeCluster>
    1b20:	ab 01       	movw	r20, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 1e 05 	call	0xa3c	; 0xa3c <displayMemory>
				break;
    1b2a:	23 cf       	rjmp	.-442    	; 0x1972 <main+0x12a>
    	default:transmitString_F(PSTR("\n\r\n\r Invalid option!\n\r"));
    1b2c:	83 e4       	ldi	r24, 0x43	; 67
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <transmitString_F>
    1b34:	1e cf       	rjmp	.-452    	; 0x1972 <main+0x12a>
    1b36:	ff cf       	rjmp	.-2      	; 0x1b36 <main+0x2ee>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
  
  	blinkRedLED();
  }

  switch (cardType)
    1b38:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <cardType>
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <main+0x2fa>
    1b40:	cc ce       	rjmp	.-616    	; 0x18da <main+0x92>
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <main+0x300>
    1b46:	ce ce       	rjmp	.-612    	; 0x18e4 <main+0x9c>
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <main+0x306>
    1b4c:	d0 ce       	rjmp	.-608    	; 0x18ee <main+0xa6>
    1b4e:	c0 ce       	rjmp	.-640    	; 0x18d0 <main+0x88>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <main+0x30e>
    1b54:	b5 ce       	rjmp	.-662    	; 0x18c0 <main+0x78>
    1b56:	af ce       	rjmp	.-674    	; 0x18b6 <main+0x6e>

00001b58 <SD_sendCommand>:
response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
if(response != 0x00)
  return response;

return 0; //normal return
}
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	18 2f       	mov	r17, r24
    1b68:	6a 01       	movw	r12, r20
    1b6a:	7b 01       	movw	r14, r22
    1b6c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <SDHC_flag>
    1b70:	81 11       	cpse	r24, r1
    1b72:	15 c0       	rjmp	.+42     	; 0x1b9e <SD_sendCommand+0x46>
    1b74:	8f ee       	ldi	r24, 0xEF	; 239
    1b76:	81 0f       	add	r24, r17
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	40 f0       	brcs	.+16     	; 0x1b8c <SD_sendCommand+0x34>
    1b7c:	88 ee       	ldi	r24, 0xE8	; 232
    1b7e:	81 0f       	add	r24, r17
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	20 f0       	brcs	.+8      	; 0x1b8c <SD_sendCommand+0x34>
    1b84:	80 ee       	ldi	r24, 0xE0	; 224
    1b86:	81 0f       	add	r24, r17
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	48 f4       	brcc	.+18     	; 0x1b9e <SD_sendCommand+0x46>
    1b8c:	0b 2e       	mov	r0, r27
    1b8e:	b9 e0       	ldi	r27, 0x09	; 9
    1b90:	cc 0c       	add	r12, r12
    1b92:	dd 1c       	adc	r13, r13
    1b94:	ee 1c       	adc	r14, r14
    1b96:	ff 1c       	adc	r15, r15
    1b98:	ba 95       	dec	r27
    1b9a:	d1 f7       	brne	.-12     	; 0x1b90 <SD_sendCommand+0x38>
    1b9c:	b0 2d       	mov	r27, r0
    1b9e:	2c 98       	cbi	0x05, 4	; 5
    1ba0:	81 2f       	mov	r24, r17
    1ba2:	80 64       	ori	r24, 0x40	; 64
    1ba4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1ba8:	8f 2d       	mov	r24, r15
    1baa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bae:	8e 2d       	mov	r24, r14
    1bb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bb4:	8d 2d       	mov	r24, r13
    1bb6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bba:	8c 2d       	mov	r24, r12
    1bbc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bc0:	18 30       	cpi	r17, 0x08	; 8
    1bc2:	21 f4       	brne	.+8      	; 0x1bcc <SD_sendCommand+0x74>
    1bc4:	87 e8       	ldi	r24, 0x87	; 135
    1bc6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <SD_sendCommand+0x82>
    1bcc:	85 e9       	ldi	r24, 0x95	; 149
    1bce:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <SD_sendCommand+0x82>
    1bd4:	c1 50       	subi	r28, 0x01	; 1
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <SD_sendCommand+0x84>
    1bd8:	1a c0       	rjmp	.+52     	; 0x1c0e <SD_sendCommand+0xb6>
    1bda:	c0 e0       	ldi	r28, 0x00	; 0
    1bdc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1be0:	d8 2f       	mov	r29, r24
    1be2:	8f 3f       	cpi	r24, 0xFF	; 255
    1be4:	b9 f3       	breq	.-18     	; 0x1bd4 <SD_sendCommand+0x7c>
    1be6:	81 11       	cpse	r24, r1
    1be8:	12 c0       	rjmp	.+36     	; 0x1c0e <SD_sendCommand+0xb6>
    1bea:	1a 33       	cpi	r17, 0x3A	; 58
    1bec:	81 f4       	brne	.+32     	; 0x1c0e <SD_sendCommand+0xb6>
    1bee:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1bf2:	86 ff       	sbrs	r24, 6
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <SD_sendCommand+0xa6>
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <SDHC_flag>
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <SD_sendCommand+0xaa>
    1bfe:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <SDHC_flag>
    1c02:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1c06:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1c0a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1c0e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1c12:	2c 9a       	sbi	0x05, 4	; 5
    1c14:	8d 2f       	mov	r24, r29
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	08 95       	ret

00001c26 <SD_init>:
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	1a e0       	ldi	r17, 0x0A	; 10
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1c36:	11 50       	subi	r17, 0x01	; 1
    1c38:	d9 f7       	brne	.-10     	; 0x1c30 <SD_init+0xa>
    1c3a:	2c 98       	cbi	0x05, 4	; 5
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	ba 01       	movw	r22, r20
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1c48:	c0 e2       	ldi	r28, 0x20	; 32
    1c4a:	d0 e0       	ldi	r29, 0x00	; 0
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <SD_init+0x3a>
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	ba 01       	movw	r22, r20
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1c5a:	21 97       	sbiw	r28, 0x01	; 1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <SD_init+0x3a>
    1c5e:	77 c0       	rjmp	.+238    	; 0x1d4e <SD_init+0x128>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <SD_init+0x28>
    1c64:	2c 9a       	sbi	0x05, 4	; 5
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
    1c72:	4a ea       	ldi	r20, 0xAA	; 170
    1c74:	51 e0       	ldi	r21, 0x01	; 1
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	88 e0       	ldi	r24, 0x08	; 8
    1c7c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1c80:	ce ef       	ldi	r28, 0xFE	; 254
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <SD_init+0x88>
    1c86:	4a ea       	ldi	r20, 0xAA	; 170
    1c88:	51 e0       	ldi	r21, 0x01	; 1
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	88 e0       	ldi	r24, 0x08	; 8
    1c90:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1c94:	21 97       	sbiw	r28, 0x01	; 1
    1c96:	59 f4       	brne	.+22     	; 0x1cae <SD_init+0x88>
    1c98:	8d e0       	ldi	r24, 0x0D	; 13
    1c9a:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1c9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ca0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <cardType>
    1caa:	01 e0       	ldi	r16, 0x01	; 1
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <SD_init+0x8e>
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	51 f7       	brne	.-44     	; 0x1c86 <SD_init+0x60>
    1cb2:	02 e0       	ldi	r16, 0x02	; 2
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	ba 01       	movw	r22, r20
    1cba:	87 e3       	ldi	r24, 0x37	; 55
    1cbc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e4       	ldi	r23, 0x40	; 64
    1cc8:	89 e2       	ldi	r24, 0x29	; 41
    1cca:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1cce:	ce ef       	ldi	r28, 0xFE	; 254
    1cd0:	d0 e0       	ldi	r29, 0x00	; 0
    1cd2:	17 c0       	rjmp	.+46     	; 0x1d02 <SD_init+0xdc>
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	ba 01       	movw	r22, r20
    1cda:	87 e3       	ldi	r24, 0x37	; 55
    1cdc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	70 e4       	ldi	r23, 0x40	; 64
    1ce8:	89 e2       	ldi	r24, 0x29	; 41
    1cea:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1cee:	21 97       	sbiw	r28, 0x01	; 1
    1cf0:	41 f4       	brne	.+16     	; 0x1d02 <SD_init+0xdc>
    1cf2:	8d e0       	ldi	r24, 0x0D	; 13
    1cf4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1cf8:	8a e0       	ldi	r24, 0x0A	; 10
    1cfa:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1cfe:	12 e0       	ldi	r17, 0x02	; 2
    1d00:	31 c0       	rjmp	.+98     	; 0x1d64 <SD_init+0x13e>
    1d02:	81 11       	cpse	r24, r1
    1d04:	e7 cf       	rjmp	.-50     	; 0x1cd4 <SD_init+0xae>
    1d06:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <SDHC_flag>
    1d0a:	02 30       	cpi	r16, 0x02	; 2
    1d0c:	59 f5       	brne	.+86     	; 0x1d64 <SD_init+0x13e>
    1d0e:	21 c0       	rjmp	.+66     	; 0x1d52 <SD_init+0x12c>
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	ba 01       	movw	r22, r20
    1d16:	8a e3       	ldi	r24, 0x3A	; 58
    1d18:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1d1c:	21 97       	sbiw	r28, 0x01	; 1
    1d1e:	49 f4       	brne	.+18     	; 0x1d32 <SD_init+0x10c>
    1d20:	8d e0       	ldi	r24, 0x0D	; 13
    1d22:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1d26:	8a e0       	ldi	r24, 0x0A	; 10
    1d28:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
    1d2c:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <cardType>
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <SD_init+0x110>
    1d32:	81 11       	cpse	r24, r1
    1d34:	ed cf       	rjmp	.-38     	; 0x1d10 <SD_init+0xea>
    1d36:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <SDHC_flag>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <SD_init+0x120>
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <cardType>
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <SD_init+0x13e>
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <cardType>
    1d4c:	0b c0       	rjmp	.+22     	; 0x1d64 <SD_init+0x13e>
    1d4e:	11 e0       	ldi	r17, 0x01	; 1
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <SD_init+0x13e>
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	ba 01       	movw	r22, r20
    1d58:	8a e3       	ldi	r24, 0x3A	; 58
    1d5a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
    1d5e:	ce ef       	ldi	r28, 0xFE	; 254
    1d60:	d0 e0       	ldi	r29, 0x00	; 0
    1d62:	e7 cf       	rjmp	.-50     	; 0x1d32 <SD_init+0x10c>
    1d64:	81 2f       	mov	r24, r17
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	ab 01       	movw	r20, r22
    1d76:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    1d78:	81 e1       	ldi	r24, 0x11	; 17
    1d7a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    1d7e:	81 11       	cpse	r24, r1
    1d80:	22 c0       	rjmp	.+68     	; 0x1dc6 <SD_readSingleBlock+0x56>

SD_CS_ASSERT;
    1d82:	2c 98       	cbi	0x05, 4	; 5

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    1d84:	c0 e0       	ldi	r28, 0x00	; 0
    1d86:	d0 e0       	ldi	r29, 0x00	; 0
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <SD_readSingleBlock+0x24>
    1d8a:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <SD_readSingleBlock+0x24>
    1d8e:	2c 9a       	sbi	0x05, 4	; 5
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	19 c0       	rjmp	.+50     	; 0x1dc6 <SD_readSingleBlock+0x56>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    1d94:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1d98:	8e 3f       	cpi	r24, 0xFE	; 254
    1d9a:	b9 f7       	brne	.-18     	; 0x1d8a <SD_readSingleBlock+0x1a>
    1d9c:	c0 e0       	ldi	r28, 0x00	; 0
    1d9e:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    1da0:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1da4:	fe 01       	movw	r30, r28
    1da6:	e3 5b       	subi	r30, 0xB3	; 179
    1da8:	fe 4f       	sbci	r31, 0xFE	; 254
    1daa:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    1dac:	21 96       	adiw	r28, 0x01	; 1
    1dae:	c1 15       	cp	r28, r1
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	d8 07       	cpc	r29, r24
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    1db6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
SPI_receive();
    1dba:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    1dbe:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
SD_CS_DEASSERT;
    1dc2:	2c 9a       	sbi	0x05, 4	; 5

return 0;
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
}
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	08 95       	ret

00001dcc <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ab 01       	movw	r20, r22
    1dd2:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    1dd4:	88 e1       	ldi	r24, 0x18	; 24
    1dd6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    1dda:	81 11       	cpse	r24, r1
    1ddc:	3e c0       	rjmp	.+124    	; 0x1e5a <SD_writeSingleBlock+0x8e>

SD_CS_ASSERT;
    1dde:	2c 98       	cbi	0x05, 4	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    1de0:	8e ef       	ldi	r24, 0xFE	; 254
    1de2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    1de6:	c0 e0       	ldi	r28, 0x00	; 0
    1de8:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    1dea:	fe 01       	movw	r30, r28
    1dec:	e3 5b       	subi	r30, 0xB3	; 179
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	80 81       	ld	r24, Z
    1df2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    1df6:	21 96       	adiw	r28, 0x01	; 1
    1df8:	c1 15       	cp	r28, r1
    1dfa:	22 e0       	ldi	r18, 0x02	; 2
    1dfc:	d2 07       	cpc	r29, r18
    1dfe:	a9 f7       	brne	.-22     	; 0x1dea <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
SPI_transmit(0xff);
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>

response = SPI_receive();
    1e0c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    1e10:	98 2f       	mov	r25, r24
    1e12:	9f 71       	andi	r25, 0x1F	; 31
    1e14:	95 30       	cpi	r25, 0x05	; 5
    1e16:	39 f0       	breq	.+14     	; 0x1e26 <SD_writeSingleBlock+0x5a>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    1e18:	2c 9a       	sbi	0x05, 4	; 5
  return response;
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <SD_writeSingleBlock+0x8e>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    1e1c:	21 96       	adiw	r28, 0x01	; 1
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <SD_writeSingleBlock+0x5e>
    1e20:	2c 9a       	sbi	0x05, 4	; 5
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	1a c0       	rjmp	.+52     	; 0x1e5a <SD_writeSingleBlock+0x8e>
    1e26:	c0 e0       	ldi	r28, 0x00	; 0
    1e28:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    1e2a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1e2e:	88 23       	and	r24, r24
    1e30:	a9 f3       	breq	.-22     	; 0x1e1c <SD_writeSingleBlock+0x50>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    1e32:	2c 9a       	sbi	0x05, 4	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    1e3a:	2c 98       	cbi	0x05, 4	; 5

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <SD_writeSingleBlock+0x82>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    1e3e:	ce 01       	movw	r24, r28
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	21 96       	adiw	r28, 0x01	; 1
    1e44:	19 f4       	brne	.+6      	; 0x1e4c <SD_writeSingleBlock+0x80>
    1e46:	2c 9a       	sbi	0x05, 4	; 5
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <SD_writeSingleBlock+0x8e>
    1e4c:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    1e4e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SPI_receive>
    1e52:	88 23       	and	r24, r24
    1e54:	a1 f3       	breq	.-24     	; 0x1e3e <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    1e56:	2c 9a       	sbi	0x05, 4	; 5

return 0;
    1e58:	80 e0       	ldi	r24, 0x00	; 0
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <spi_init>:
	// Enable SPI, Set as Master
	//- Prescaler: Fosc/16, Enable Interrupts
	//The MOSI, SCK pins
	//SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPIE);
	//SPR01 
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    1e60:	82 e5       	ldi	r24, 0x52	; 82
    1e62:	8c bd       	out	0x2c, r24	; 44
SPSR = 0x00;
    1e64:	1d bc       	out	0x2d, r1	; 45
    1e66:	08 95       	ret

00001e68 <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    1e68:	8e bd       	out	0x2e, r24	; 46

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    1e6a:	0d b4       	in	r0, 0x2d	; 45
    1e6c:	07 fe       	sbrs	r0, 7
    1e6e:	fd cf       	rjmp	.-6      	; 0x1e6a <SPI_transmit+0x2>
data = SPDR;
    1e70:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    1e72:	08 95       	ret

00001e74 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    1e78:	0d b4       	in	r0, 0x2d	; 45
    1e7a:	07 fe       	sbrs	r0, 7
    1e7c:	fd cf       	rjmp	.-6      	; 0x1e78 <SPI_receive+0x4>
data = SPDR;
    1e7e:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    1e80:	08 95       	ret

00001e82 <uart0_init>:
 UBRRH = 0x00; //set baud rate hi
 UCSRB = 0x18;
 */
 	u16 MYUBRR = (F_CPU/16/9600)-1;
 	/* Setting BAUD-RATE */
 	UBRR0H = (u8)(MYUBRR>>8);
    1e82:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 	UBRR0L = (u8)MYUBRR;
    1e86:	87 e6       	ldi	r24, 0x67	; 103
    1e88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 	/* Enable receiver and transmitter */
 	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1e8c:	e1 ec       	ldi	r30, 0xC1	; 193
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	88 61       	ori	r24, 0x18	; 24
    1e94:	80 83       	st	Z, r24
    1e96:	08 95       	ret

00001e98 <receiveByte>:
//**************************************************
//Function to receive a single byte
//*************************************************
unsigned char receiveByte( void )
{
	loop_until_bit_is_set(UCSR0A, RXC0);
    1e98:	e0 ec       	ldi	r30, 0xC0	; 192
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 23       	and	r24, r24
    1ea0:	ec f7       	brge	.-6      	; 0x1e9c <receiveByte+0x4>
	return UDR0;
    1ea2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    1ea6:	08 95       	ret

00001ea8 <transmitByte>:
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	 /* Wait for empty transmit buffer */
	 while ( !( UCSR0A & (1<<UDRE0)) );
    1ea8:	e0 ec       	ldi	r30, 0xC0	; 192
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	90 81       	ld	r25, Z
    1eae:	95 ff       	sbrs	r25, 5
    1eb0:	fd cf       	rjmp	.-6      	; 0x1eac <transmitByte+0x4>
	 /* Put data into buffer, sends the data */
	 UDR0 = data;
    1eb2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1eb6:	08 95       	ret

00001eb8 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	84 91       	lpm	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	49 f0       	breq	.+18     	; 0x1ed8 <transmitString_F+0x20>
    1ec6:	fe 01       	movw	r30, r28
   transmitByte(pgm_read_byte(&(*string++)));
    1ec8:	21 96       	adiw	r28, 0x01	; 1
    1eca:	84 91       	lpm	r24, Z
    1ecc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	84 91       	lpm	r24, Z
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	f7 cf       	rjmp	.-18     	; 0x1ec6 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	ec 01       	movw	r28, r24
  while (*string)
    1ee4:	88 81       	ld	r24, Y
    1ee6:	88 23       	and	r24, r24
    1ee8:	31 f0       	breq	.+12     	; 0x1ef6 <transmitString+0x18>
    1eea:	21 96       	adiw	r28, 0x01	; 1
   transmitByte(*string++);
    1eec:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    1ef0:	89 91       	ld	r24, Y+
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	fb cf       	rjmp	.-10     	; 0x1eec <transmitString+0xe>
   transmitByte(*string++);
}
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	08 95       	ret

00001efc <__mulsi3>:
    1efc:	db 01       	movw	r26, r22
    1efe:	8f 93       	push	r24
    1f00:	9f 93       	push	r25
    1f02:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__muluhisi3>
    1f06:	bf 91       	pop	r27
    1f08:	af 91       	pop	r26
    1f0a:	a2 9f       	mul	r26, r18
    1f0c:	80 0d       	add	r24, r0
    1f0e:	91 1d       	adc	r25, r1
    1f10:	a3 9f       	mul	r26, r19
    1f12:	90 0d       	add	r25, r0
    1f14:	b2 9f       	mul	r27, r18
    1f16:	90 0d       	add	r25, r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	08 95       	ret

00001f1c <__udivmodsi4>:
    1f1c:	a1 e2       	ldi	r26, 0x21	; 33
    1f1e:	1a 2e       	mov	r1, r26
    1f20:	aa 1b       	sub	r26, r26
    1f22:	bb 1b       	sub	r27, r27
    1f24:	fd 01       	movw	r30, r26
    1f26:	0d c0       	rjmp	.+26     	; 0x1f42 <__udivmodsi4_ep>

00001f28 <__udivmodsi4_loop>:
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	ee 1f       	adc	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	a2 17       	cp	r26, r18
    1f32:	b3 07       	cpc	r27, r19
    1f34:	e4 07       	cpc	r30, r20
    1f36:	f5 07       	cpc	r31, r21
    1f38:	20 f0       	brcs	.+8      	; 0x1f42 <__udivmodsi4_ep>
    1f3a:	a2 1b       	sub	r26, r18
    1f3c:	b3 0b       	sbc	r27, r19
    1f3e:	e4 0b       	sbc	r30, r20
    1f40:	f5 0b       	sbc	r31, r21

00001f42 <__udivmodsi4_ep>:
    1f42:	66 1f       	adc	r22, r22
    1f44:	77 1f       	adc	r23, r23
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	1a 94       	dec	r1
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <__udivmodsi4_loop>
    1f4e:	60 95       	com	r22
    1f50:	70 95       	com	r23
    1f52:	80 95       	com	r24
    1f54:	90 95       	com	r25
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	bd 01       	movw	r22, r26
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	08 95       	ret

00001f60 <__umulhisi3>:
    1f60:	a2 9f       	mul	r26, r18
    1f62:	b0 01       	movw	r22, r0
    1f64:	b3 9f       	mul	r27, r19
    1f66:	c0 01       	movw	r24, r0
    1f68:	a3 9f       	mul	r26, r19
    1f6a:	70 0d       	add	r23, r0
    1f6c:	81 1d       	adc	r24, r1
    1f6e:	11 24       	eor	r1, r1
    1f70:	91 1d       	adc	r25, r1
    1f72:	b2 9f       	mul	r27, r18
    1f74:	70 0d       	add	r23, r0
    1f76:	81 1d       	adc	r24, r1
    1f78:	11 24       	eor	r1, r1
    1f7a:	91 1d       	adc	r25, r1
    1f7c:	08 95       	ret

00001f7e <__muluhisi3>:
    1f7e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__umulhisi3>
    1f82:	a5 9f       	mul	r26, r21
    1f84:	90 0d       	add	r25, r0
    1f86:	b4 9f       	mul	r27, r20
    1f88:	90 0d       	add	r25, r0
    1f8a:	a4 9f       	mul	r26, r20
    1f8c:	80 0d       	add	r24, r0
    1f8e:	91 1d       	adc	r25, r1
    1f90:	11 24       	eor	r1, r1
    1f92:	08 95       	ret

00001f94 <_exit>:
    1f94:	f8 94       	cli

00001f96 <__stop_program>:
    1f96:	ff cf       	rjmp	.-2      	; 0x1f96 <__stop_program>
